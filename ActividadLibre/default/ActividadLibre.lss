
ActividadLibre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00001728  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  000018c8  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000245  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000290a  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012de  00000000  00000000  000045b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001963  00000000  00000000  00005895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000071f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000073f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010a6  00000000  00000000  0000779b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00008841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e2       	ldi	r30, 0x28	; 40
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 31       	cpi	r26, 0x10	; 16
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 49 05 	call	0xa92	; 0xa92 <main>
      9e:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <display>:
	check();
}

void display(int i) // Números del display (puntaje)
{
	switch(i)
      a6:	84 30       	cpi	r24, 0x04	; 4
      a8:	91 05       	cpc	r25, r1
      aa:	61 f1       	breq	.+88     	; 0x104 <display+0x5e>
      ac:	85 30       	cpi	r24, 0x05	; 5
      ae:	91 05       	cpc	r25, r1
      b0:	7c f4       	brge	.+30     	; 0xd0 <display+0x2a>
      b2:	81 30       	cpi	r24, 0x01	; 1
      b4:	91 05       	cpc	r25, r1
      b6:	01 f1       	breq	.+64     	; 0xf8 <display+0x52>
      b8:	82 30       	cpi	r24, 0x02	; 2
      ba:	91 05       	cpc	r25, r1
      bc:	1c f4       	brge	.+6      	; 0xc4 <display+0x1e>
      be:	89 2b       	or	r24, r25
      c0:	c9 f0       	breq	.+50     	; 0xf4 <display+0x4e>
      c2:	39 c0       	rjmp	.+114    	; 0x136 <display+0x90>
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	91 05       	cpc	r25, r1
      c8:	c9 f0       	breq	.+50     	; 0xfc <display+0x56>
      ca:	03 97       	sbiw	r24, 0x03	; 3
      cc:	a1 f5       	brne	.+104    	; 0x136 <display+0x90>
      ce:	18 c0       	rjmp	.+48     	; 0x100 <display+0x5a>
      d0:	87 30       	cpi	r24, 0x07	; 7
      d2:	91 05       	cpc	r25, r1
      d4:	e9 f0       	breq	.+58     	; 0x110 <display+0x6a>
      d6:	88 30       	cpi	r24, 0x08	; 8
      d8:	91 05       	cpc	r25, r1
      da:	34 f4       	brge	.+12     	; 0xe8 <display+0x42>
      dc:	85 30       	cpi	r24, 0x05	; 5
      de:	91 05       	cpc	r25, r1
      e0:	99 f0       	breq	.+38     	; 0x108 <display+0x62>
      e2:	06 97       	sbiw	r24, 0x06	; 6
      e4:	41 f5       	brne	.+80     	; 0x136 <display+0x90>
      e6:	12 c0       	rjmp	.+36     	; 0x10c <display+0x66>
      e8:	88 30       	cpi	r24, 0x08	; 8
      ea:	91 05       	cpc	r25, r1
      ec:	c1 f0       	breq	.+48     	; 0x11e <display+0x78>
      ee:	09 97       	sbiw	r24, 0x09	; 9
      f0:	11 f5       	brne	.+68     	; 0x136 <display+0x90>
      f2:	1e c0       	rjmp	.+60     	; 0x130 <display+0x8a>
		{
		case 0: PORTC = 0x3F;
      f4:	8f e3       	ldi	r24, 0x3F	; 63
      f6:	1d c0       	rjmp	.+58     	; 0x132 <display+0x8c>
				break;
		case 1: PORTC = 0x06;
      f8:	86 e0       	ldi	r24, 0x06	; 6
      fa:	0b c0       	rjmp	.+22     	; 0x112 <display+0x6c>
				display_g = 0;
				break;
		case 2: PORTC = 0x1B;
      fc:	8b e1       	ldi	r24, 0x1B	; 27
      fe:	10 c0       	rjmp	.+32     	; 0x120 <display+0x7a>
				display_g = 1;
				break;
		case 3: PORTC = 0x0F;
     100:	8f e0       	ldi	r24, 0x0F	; 15
     102:	17 c0       	rjmp	.+46     	; 0x132 <display+0x8c>
				break;
		case 4: PORTC = 0x26;
     104:	86 e2       	ldi	r24, 0x26	; 38
     106:	15 c0       	rjmp	.+42     	; 0x132 <display+0x8c>
				break;
		case 5: PORTC = 0x2D;
     108:	8d e2       	ldi	r24, 0x2D	; 45
     10a:	13 c0       	rjmp	.+38     	; 0x132 <display+0x8c>
				break;
		case 6: PORTC = 0x3D;
     10c:	8d e3       	ldi	r24, 0x3D	; 61
     10e:	08 c0       	rjmp	.+16     	; 0x120 <display+0x7a>
				display_g = 1;
				break;
		case 7: PORTC = 0x07;
     110:	87 e0       	ldi	r24, 0x07	; 7
     112:	88 b9       	out	0x08, r24	; 8
				display_g = 0;
     114:	10 92 0f 02 	sts	0x020F, r1
     118:	10 92 0e 02 	sts	0x020E, r1
     11c:	08 95       	ret
				break;
		case 8: PORTC = 0x3F;
     11e:	8f e3       	ldi	r24, 0x3F	; 63
     120:	88 b9       	out	0x08, r24	; 8
				display_g = 1;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	90 93 0f 02 	sts	0x020F, r25
     12a:	80 93 0e 02 	sts	0x020E, r24
     12e:	08 95       	ret
				break;
		case 9: PORTC = 0x2F;
     130:	8f e2       	ldi	r24, 0x2F	; 47
     132:	88 b9       	out	0x08, r24	; 8
     134:	08 95       	ret
				break;
		default: PORTC = 0x00;
     136:	18 b8       	out	0x08, r1	; 8
     138:	08 95       	ret

0000013a <win>:

void win() // Esto se ejecuta cuando se llega al máximo de puntos (cuando ganas)
{
	while (1)
	{
		PORTD = 0x11;
     13a:	71 e1       	ldi	r23, 0x11	; 17
		PORTC = 0xFF;
     13c:	5f ef       	ldi	r21, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     13e:	2e e3       	ldi	r18, 0x3E	; 62
     140:	39 e4       	ldi	r19, 0x49	; 73
		_delay_ms(75);
		PORTD = 0x0A;
     142:	4a e0       	ldi	r20, 0x0A	; 10
		PORTC = 0x00;
		_delay_ms(75);
		PORTD = 0x04;
     144:	64 e0       	ldi	r22, 0x04	; 4

void win() // Esto se ejecuta cuando se llega al máximo de puntos (cuando ganas)
{
	while (1)
	{
		PORTD = 0x11;
     146:	7b b9       	out	0x0b, r23	; 11
		PORTC = 0xFF;
     148:	58 b9       	out	0x08, r21	; 8
     14a:	c9 01       	movw	r24, r18
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <win+0x12>
		_delay_ms(75);
		PORTD = 0x0A;
     150:	4b b9       	out	0x0b, r20	; 11
		PORTC = 0x00;
     152:	18 b8       	out	0x08, r1	; 8
     154:	c9 01       	movw	r24, r18
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <win+0x1c>
		_delay_ms(75);
		PORTD = 0x04;
     15a:	6b b9       	out	0x0b, r22	; 11
		PORTC = 0xFF;
     15c:	58 b9       	out	0x08, r21	; 8
     15e:	c9 01       	movw	r24, r18
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <win+0x26>
		_delay_ms(75);
		PORTD = 0x0A;
     164:	4b b9       	out	0x0b, r20	; 11
		PORTC = 0x00;
     166:	18 b8       	out	0x08, r1	; 8
     168:	c9 01       	movw	r24, r18
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <win+0x30>
     16e:	eb cf       	rjmp	.-42     	; 0x146 <win+0xc>

00000170 <check>:
	}
}

void check() // Comprueba si se presionó el botón en el momento correcto
{	
	if (PINB == 0x01)
     170:	83 b1       	in	r24, 0x03	; 3
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	09 f0       	breq	.+2      	; 0x178 <check+0x8>
     176:	a1 c0       	rjmp	.+322    	; 0x2ba <check+0x14a>
	{
		DDRB &= ~(1 << 0);
     178:	20 98       	cbi	0x04, 0	; 4
		if (PORTD == 0x08 || PORTD == 0x88)
     17a:	8b b1       	in	r24, 0x0b	; 11
     17c:	88 30       	cpi	r24, 0x08	; 8
     17e:	21 f0       	breq	.+8      	; 0x188 <check+0x18>
     180:	8b b1       	in	r24, 0x0b	; 11
     182:	88 38       	cpi	r24, 0x88	; 136
     184:	09 f0       	breq	.+2      	; 0x188 <check+0x18>
     186:	44 c0       	rjmp	.+136    	; 0x210 <check+0xa0>
		{
			points += 1;			
     188:	80 91 0c 02 	lds	r24, 0x020C
     18c:	90 91 0d 02 	lds	r25, 0x020D
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	90 93 0d 02 	sts	0x020D, r25
     196:	80 93 0c 02 	sts	0x020C, r24
			display(points);
     19a:	0e 94 53 00 	call	0xa6	; 0xa6 <display>
			if (points == 10) win();
     19e:	80 91 0c 02 	lds	r24, 0x020C
     1a2:	90 91 0d 02 	lds	r25, 0x020D
     1a6:	0a 97       	sbiw	r24, 0x0a	; 10
     1a8:	11 f4       	brne	.+4      	; 0x1ae <check+0x3e>
     1aa:	0e 94 9d 00 	call	0x13a	; 0x13a <win>
			delay -= difficulty;
     1ae:	80 91 00 01 	lds	r24, 0x0100
     1b2:	90 91 01 01 	lds	r25, 0x0101
     1b6:	20 91 02 01 	lds	r18, 0x0102
     1ba:	30 91 03 01 	lds	r19, 0x0103
     1be:	82 1b       	sub	r24, r18
     1c0:	93 0b       	sbc	r25, r19
     1c2:	90 93 01 01 	sts	0x0101, r25
     1c6:	80 93 00 01 	sts	0x0100, r24
			for (int i = 0; i <= 5; i++)
			{
				if (display_g == 1) PORTD = 0x80;
     1ca:	40 91 0e 02 	lds	r20, 0x020E
     1ce:	50 91 0f 02 	lds	r21, 0x020F
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	a0 e8       	ldi	r26, 0x80	; 128
     1d8:	6e e3       	ldi	r22, 0x3E	; 62
     1da:	79 e4       	ldi	r23, 0x49	; 73
				else PORTD = 0x00;
				_delay_ms(75);
				if (display_g == 1) PORTD = 0x88;
				else PORTD = 0x08;
     1dc:	f8 e0       	ldi	r31, 0x08	; 8
			for (int i = 0; i <= 5; i++)
			{
				if (display_g == 1) PORTD = 0x80;
				else PORTD = 0x00;
				_delay_ms(75);
				if (display_g == 1) PORTD = 0x88;
     1de:	e8 e8       	ldi	r30, 0x88	; 136
			display(points);
			if (points == 10) win();
			delay -= difficulty;
			for (int i = 0; i <= 5; i++)
			{
				if (display_g == 1) PORTD = 0x80;
     1e0:	41 30       	cpi	r20, 0x01	; 1
     1e2:	51 05       	cpc	r21, r1
     1e4:	11 f4       	brne	.+4      	; 0x1ea <check+0x7a>
     1e6:	ab b9       	out	0x0b, r26	; 11
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <check+0x7c>
				else PORTD = 0x00;
     1ea:	1b b8       	out	0x0b, r1	; 11
     1ec:	cb 01       	movw	r24, r22
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <check+0x7e>
				_delay_ms(75);
				if (display_g == 1) PORTD = 0x88;
     1f2:	41 30       	cpi	r20, 0x01	; 1
     1f4:	51 05       	cpc	r21, r1
     1f6:	11 f4       	brne	.+4      	; 0x1fc <check+0x8c>
     1f8:	eb b9       	out	0x0b, r30	; 11
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <check+0x8e>
				else PORTD = 0x08;
     1fc:	fb b9       	out	0x0b, r31	; 11
     1fe:	cb 01       	movw	r24, r22
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <check+0x90>
		{
			points += 1;			
			display(points);
			if (points == 10) win();
			delay -= difficulty;
			for (int i = 0; i <= 5; i++)
     204:	2f 5f       	subi	r18, 0xFF	; 255
     206:	3f 4f       	sbci	r19, 0xFF	; 255
     208:	26 30       	cpi	r18, 0x06	; 6
     20a:	31 05       	cpc	r19, r1
     20c:	49 f7       	brne	.-46     	; 0x1e0 <check+0x70>
     20e:	3f c0       	rjmp	.+126    	; 0x28e <check+0x11e>
			_delay_ms(250);
			_delay_ms(250);
		} 
		else 
		{
			if (points != 0) points -= 1;
     210:	80 91 0c 02 	lds	r24, 0x020C
     214:	90 91 0d 02 	lds	r25, 0x020D
     218:	00 97       	sbiw	r24, 0x00	; 0
     21a:	29 f0       	breq	.+10     	; 0x226 <check+0xb6>
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	90 93 0d 02 	sts	0x020D, r25
     222:	80 93 0c 02 	sts	0x020C, r24
			if (delay != 250) delay += 25;
     226:	80 91 00 01 	lds	r24, 0x0100
     22a:	90 91 01 01 	lds	r25, 0x0101
     22e:	8a 3f       	cpi	r24, 0xFA	; 250
     230:	91 05       	cpc	r25, r1
     232:	29 f0       	breq	.+10     	; 0x23e <check+0xce>
     234:	49 96       	adiw	r24, 0x19	; 25
     236:	90 93 01 01 	sts	0x0101, r25
     23a:	80 93 00 01 	sts	0x0100, r24
			display(points);
     23e:	80 91 0c 02 	lds	r24, 0x020C
     242:	90 91 0d 02 	lds	r25, 0x020D
     246:	0e 94 53 00 	call	0xa6	; 0xa6 <display>
			for (int i = 0; i <= 3; i++)
			{
				if (display_g == 1) PORTD = 0x80;
     24a:	40 91 0e 02 	lds	r20, 0x020E
     24e:	50 91 0f 02 	lds	r21, 0x020F
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	a0 e8       	ldi	r26, 0x80	; 128
     258:	6c e7       	ldi	r22, 0x7C	; 124
     25a:	72 e9       	ldi	r23, 0x92	; 146
				else PORTD = 0x00;
				_delay_ms(150);
				if (display_g == 1) PORTD = 0xFF;
				else PORTD = 0x7F;
     25c:	ff e7       	ldi	r31, 0x7F	; 127
			for (int i = 0; i <= 3; i++)
			{
				if (display_g == 1) PORTD = 0x80;
				else PORTD = 0x00;
				_delay_ms(150);
				if (display_g == 1) PORTD = 0xFF;
     25e:	ef ef       	ldi	r30, 0xFF	; 255
			if (points != 0) points -= 1;
			if (delay != 250) delay += 25;
			display(points);
			for (int i = 0; i <= 3; i++)
			{
				if (display_g == 1) PORTD = 0x80;
     260:	41 30       	cpi	r20, 0x01	; 1
     262:	51 05       	cpc	r21, r1
     264:	11 f4       	brne	.+4      	; 0x26a <check+0xfa>
     266:	ab b9       	out	0x0b, r26	; 11
     268:	01 c0       	rjmp	.+2      	; 0x26c <check+0xfc>
				else PORTD = 0x00;
     26a:	1b b8       	out	0x0b, r1	; 11
     26c:	cb 01       	movw	r24, r22
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <check+0xfe>
				_delay_ms(150);
				if (display_g == 1) PORTD = 0xFF;
     272:	41 30       	cpi	r20, 0x01	; 1
     274:	51 05       	cpc	r21, r1
     276:	11 f4       	brne	.+4      	; 0x27c <check+0x10c>
     278:	eb b9       	out	0x0b, r30	; 11
     27a:	01 c0       	rjmp	.+2      	; 0x27e <check+0x10e>
				else PORTD = 0x7F;
     27c:	fb b9       	out	0x0b, r31	; 11
     27e:	cb 01       	movw	r24, r22
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <check+0x110>
		else 
		{
			if (points != 0) points -= 1;
			if (delay != 250) delay += 25;
			display(points);
			for (int i = 0; i <= 3; i++)
     284:	2f 5f       	subi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	24 30       	cpi	r18, 0x04	; 4
     28a:	31 05       	cpc	r19, r1
     28c:	49 f7       	brne	.-46     	; 0x260 <check+0xf0>
     28e:	84 e2       	ldi	r24, 0x24	; 36
     290:	94 ef       	ldi	r25, 0xF4	; 244
     292:	fc 01       	movw	r30, r24
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <check+0x124>
				else PORTD = 0x7F;
				_delay_ms(150);
			}
			_delay_ms(250);
			_delay_ms(250);
			if (display_g == 1) PORTD = 0x80;
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <check+0x128>
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	51 05       	cpc	r21, r1
     2a0:	19 f4       	brne	.+6      	; 0x2a8 <check+0x138>
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <check+0x13a>
			else PORTD = 0x00;
     2a8:	1b b8       	out	0x0b, r1	; 11
     2aa:	84 e2       	ldi	r24, 0x24	; 36
     2ac:	94 ef       	ldi	r25, 0xF4	; 244
     2ae:	fc 01       	movw	r30, r24
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <check+0x140>
			_delay_ms(250);
			_delay_ms(250);
		}
		DDRB |= (1 << 0);
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <check+0x144>
     2b8:	20 9a       	sbi	0x04, 0	; 4
     2ba:	08 95       	ret

000002bc <game>:
		game();
	}
}

void game() // Secuencia de movimiento de los leds
{	check();
     2bc:	af 92       	push	r10
     2be:	bf 92       	push	r11
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x81;
     2d0:	80 91 0e 02 	lds	r24, 0x020E
     2d4:	90 91 0f 02 	lds	r25, 0x020F
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <game+0x24>
     2dc:	81 e8       	ldi	r24, 0x81	; 129
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <game+0x26>
	else PORTD = 0x01;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     2e4:	60 91 00 01 	lds	r22, 0x0100
     2e8:	70 91 01 01 	lds	r23, 0x0101
     2ec:	88 27       	eor	r24, r24
     2ee:	77 fd       	sbrc	r23, 7
     2f0:	80 95       	com	r24
     2f2:	98 2f       	mov	r25, r24
     2f4:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     2f8:	5b 01       	movw	r10, r22
     2fa:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4a e7       	ldi	r20, 0x7A	; 122
     302:	53 e4       	ldi	r21, 0x43	; 67
     304:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     308:	7b 01       	movw	r14, r22
     30a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e8       	ldi	r20, 0x80	; 128
     312:	5f e3       	ldi	r21, 0x3F	; 63
     314:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     318:	88 23       	and	r24, r24
     31a:	1c f4       	brge	.+6      	; 0x322 <game+0x66>
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	24 c0       	rjmp	.+72     	; 0x36a <game+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	3f ef       	ldi	r19, 0xFF	; 255
     32a:	4f e7       	ldi	r20, 0x7F	; 127
     32c:	57 e4       	ldi	r21, 0x47	; 71
     32e:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     332:	18 16       	cp	r1, r24
     334:	b4 f4       	brge	.+44     	; 0x362 <game+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     336:	c6 01       	movw	r24, r12
     338:	b5 01       	movw	r22, r10
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e2       	ldi	r20, 0x20	; 32
     340:	51 e4       	ldi	r21, 0x41	; 65
     342:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     346:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     34a:	89 e1       	ldi	r24, 0x19	; 25
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	05 c0       	rjmp	.+10     	; 0x35a <game+0x9e>
     350:	fc 01       	movw	r30, r24
     352:	31 97       	sbiw	r30, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <game+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     356:	61 50       	subi	r22, 0x01	; 1
     358:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35a:	61 15       	cp	r22, r1
     35c:	71 05       	cpc	r23, r1
     35e:	c1 f7       	brne	.-16     	; 0x350 <game+0x94>
     360:	07 c0       	rjmp	.+14     	; 0x370 <game+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	c8 01       	movw	r24, r16
     364:	b7 01       	movw	r22, r14
     366:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     36a:	cb 01       	movw	r24, r22
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <game+0xb0>
	check();
     370:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x82;
     374:	80 91 0e 02 	lds	r24, 0x020E
     378:	90 91 0f 02 	lds	r25, 0x020F
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	11 f4       	brne	.+4      	; 0x384 <game+0xc8>
     380:	82 e8       	ldi	r24, 0x82	; 130
     382:	01 c0       	rjmp	.+2      	; 0x386 <game+0xca>
	else PORTD = 0x02;
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     388:	60 91 00 01 	lds	r22, 0x0100
     38c:	70 91 01 01 	lds	r23, 0x0101
     390:	88 27       	eor	r24, r24
     392:	77 fd       	sbrc	r23, 7
     394:	80 95       	com	r24
     396:	98 2f       	mov	r25, r24
     398:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     39c:	5b 01       	movw	r10, r22
     39e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	4a e7       	ldi	r20, 0x7A	; 122
     3a6:	53 e4       	ldi	r21, 0x43	; 67
     3a8:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     3ac:	7b 01       	movw	r14, r22
     3ae:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	1c f4       	brge	.+6      	; 0x3c6 <game+0x10a>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	24 c0       	rjmp	.+72     	; 0x40e <game+0x152>
		__ticks = 1;
	else if (__tmp > 65535)
     3c6:	c8 01       	movw	r24, r16
     3c8:	b7 01       	movw	r22, r14
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	3f ef       	ldi	r19, 0xFF	; 255
     3ce:	4f e7       	ldi	r20, 0x7F	; 127
     3d0:	57 e4       	ldi	r21, 0x47	; 71
     3d2:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     3d6:	18 16       	cp	r1, r24
     3d8:	b4 f4       	brge	.+44     	; 0x406 <game+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3da:	c6 01       	movw	r24, r12
     3dc:	b5 01       	movw	r22, r10
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	51 e4       	ldi	r21, 0x41	; 65
     3e6:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     3ea:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     3ee:	89 e1       	ldi	r24, 0x19	; 25
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <game+0x142>
     3f4:	fc 01       	movw	r30, r24
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <game+0x13a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3fa:	61 50       	subi	r22, 0x01	; 1
     3fc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3fe:	61 15       	cp	r22, r1
     400:	71 05       	cpc	r23, r1
     402:	c1 f7       	brne	.-16     	; 0x3f4 <game+0x138>
     404:	07 c0       	rjmp	.+14     	; 0x414 <game+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     406:	c8 01       	movw	r24, r16
     408:	b7 01       	movw	r22, r14
     40a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     40e:	cb 01       	movw	r24, r22
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <game+0x154>
	check();
     414:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x84;
     418:	80 91 0e 02 	lds	r24, 0x020E
     41c:	90 91 0f 02 	lds	r25, 0x020F
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	11 f4       	brne	.+4      	; 0x428 <game+0x16c>
     424:	84 e8       	ldi	r24, 0x84	; 132
     426:	01 c0       	rjmp	.+2      	; 0x42a <game+0x16e>
	else PORTD = 0x04;
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     42c:	60 91 00 01 	lds	r22, 0x0100
     430:	70 91 01 01 	lds	r23, 0x0101
     434:	88 27       	eor	r24, r24
     436:	77 fd       	sbrc	r23, 7
     438:	80 95       	com	r24
     43a:	98 2f       	mov	r25, r24
     43c:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     440:	5b 01       	movw	r10, r22
     442:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	4a e7       	ldi	r20, 0x7A	; 122
     44a:	53 e4       	ldi	r21, 0x43	; 67
     44c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     450:	7b 01       	movw	r14, r22
     452:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	40 e8       	ldi	r20, 0x80	; 128
     45a:	5f e3       	ldi	r21, 0x3F	; 63
     45c:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     460:	88 23       	and	r24, r24
     462:	1c f4       	brge	.+6      	; 0x46a <game+0x1ae>
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	24 c0       	rjmp	.+72     	; 0x4b2 <game+0x1f6>
		__ticks = 1;
	else if (__tmp > 65535)
     46a:	c8 01       	movw	r24, r16
     46c:	b7 01       	movw	r22, r14
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	3f ef       	ldi	r19, 0xFF	; 255
     472:	4f e7       	ldi	r20, 0x7F	; 127
     474:	57 e4       	ldi	r21, 0x47	; 71
     476:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     47a:	18 16       	cp	r1, r24
     47c:	b4 f4       	brge	.+44     	; 0x4aa <game+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     47e:	c6 01       	movw	r24, r12
     480:	b5 01       	movw	r22, r10
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     48e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     492:	89 e1       	ldi	r24, 0x19	; 25
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <game+0x1e6>
     498:	fc 01       	movw	r30, r24
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <game+0x1de>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49e:	61 50       	subi	r22, 0x01	; 1
     4a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a2:	61 15       	cp	r22, r1
     4a4:	71 05       	cpc	r23, r1
     4a6:	c1 f7       	brne	.-16     	; 0x498 <game+0x1dc>
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <game+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4aa:	c8 01       	movw	r24, r16
     4ac:	b7 01       	movw	r22, r14
     4ae:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     4b2:	cb 01       	movw	r24, r22
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <game+0x1f8>
	check();
     4b8:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x88;
     4bc:	80 91 0e 02 	lds	r24, 0x020E
     4c0:	90 91 0f 02 	lds	r25, 0x020F
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	11 f4       	brne	.+4      	; 0x4cc <game+0x210>
     4c8:	88 e8       	ldi	r24, 0x88	; 136
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <game+0x212>
	else PORTD = 0x08;
     4cc:	88 e0       	ldi	r24, 0x08	; 8
     4ce:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     4d0:	60 91 00 01 	lds	r22, 0x0100
     4d4:	70 91 01 01 	lds	r23, 0x0101
     4d8:	88 27       	eor	r24, r24
     4da:	77 fd       	sbrc	r23, 7
     4dc:	80 95       	com	r24
     4de:	98 2f       	mov	r25, r24
     4e0:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     4e4:	5b 01       	movw	r10, r22
     4e6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a e7       	ldi	r20, 0x7A	; 122
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     4f4:	7b 01       	movw	r14, r22
     4f6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e8       	ldi	r20, 0x80	; 128
     4fe:	5f e3       	ldi	r21, 0x3F	; 63
     500:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     504:	88 23       	and	r24, r24
     506:	1c f4       	brge	.+6      	; 0x50e <game+0x252>
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	24 c0       	rjmp	.+72     	; 0x556 <game+0x29a>
		__ticks = 1;
	else if (__tmp > 65535)
     50e:	c8 01       	movw	r24, r16
     510:	b7 01       	movw	r22, r14
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	3f ef       	ldi	r19, 0xFF	; 255
     516:	4f e7       	ldi	r20, 0x7F	; 127
     518:	57 e4       	ldi	r21, 0x47	; 71
     51a:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     51e:	18 16       	cp	r1, r24
     520:	b4 f4       	brge	.+44     	; 0x54e <game+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     522:	c6 01       	movw	r24, r12
     524:	b5 01       	movw	r22, r10
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e2       	ldi	r20, 0x20	; 32
     52c:	51 e4       	ldi	r21, 0x41	; 65
     52e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     532:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     536:	89 e1       	ldi	r24, 0x19	; 25
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	05 c0       	rjmp	.+10     	; 0x546 <game+0x28a>
     53c:	fc 01       	movw	r30, r24
     53e:	31 97       	sbiw	r30, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <game+0x282>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     542:	61 50       	subi	r22, 0x01	; 1
     544:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     546:	61 15       	cp	r22, r1
     548:	71 05       	cpc	r23, r1
     54a:	c1 f7       	brne	.-16     	; 0x53c <game+0x280>
     54c:	07 c0       	rjmp	.+14     	; 0x55c <game+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     54e:	c8 01       	movw	r24, r16
     550:	b7 01       	movw	r22, r14
     552:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     556:	cb 01       	movw	r24, r22
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <game+0x29c>
	check();
     55c:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x90;
     560:	80 91 0e 02 	lds	r24, 0x020E
     564:	90 91 0f 02 	lds	r25, 0x020F
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	11 f4       	brne	.+4      	; 0x570 <game+0x2b4>
     56c:	80 e9       	ldi	r24, 0x90	; 144
     56e:	01 c0       	rjmp	.+2      	; 0x572 <game+0x2b6>
	else PORTD = 0x10;
     570:	80 e1       	ldi	r24, 0x10	; 16
     572:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     574:	60 91 00 01 	lds	r22, 0x0100
     578:	70 91 01 01 	lds	r23, 0x0101
     57c:	88 27       	eor	r24, r24
     57e:	77 fd       	sbrc	r23, 7
     580:	80 95       	com	r24
     582:	98 2f       	mov	r25, r24
     584:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     588:	5b 01       	movw	r10, r22
     58a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	4a e7       	ldi	r20, 0x7A	; 122
     592:	53 e4       	ldi	r21, 0x43	; 67
     594:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     598:	7b 01       	movw	r14, r22
     59a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e8       	ldi	r20, 0x80	; 128
     5a2:	5f e3       	ldi	r21, 0x3F	; 63
     5a4:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     5a8:	88 23       	and	r24, r24
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <game+0x2f6>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	24 c0       	rjmp	.+72     	; 0x5fa <game+0x33e>
		__ticks = 1;
	else if (__tmp > 65535)
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	3f ef       	ldi	r19, 0xFF	; 255
     5ba:	4f e7       	ldi	r20, 0x7F	; 127
     5bc:	57 e4       	ldi	r21, 0x47	; 71
     5be:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     5c2:	18 16       	cp	r1, r24
     5c4:	b4 f4       	brge	.+44     	; 0x5f2 <game+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c6:	c6 01       	movw	r24, r12
     5c8:	b5 01       	movw	r22, r10
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e2       	ldi	r20, 0x20	; 32
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     5d6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     5da:	89 e1       	ldi	r24, 0x19	; 25
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <game+0x32e>
     5e0:	fc 01       	movw	r30, r24
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <game+0x326>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e6:	61 50       	subi	r22, 0x01	; 1
     5e8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ea:	61 15       	cp	r22, r1
     5ec:	71 05       	cpc	r23, r1
     5ee:	c1 f7       	brne	.-16     	; 0x5e0 <game+0x324>
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <game+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f2:	c8 01       	movw	r24, r16
     5f4:	b7 01       	movw	r22, r14
     5f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     5fa:	cb 01       	movw	r24, r22
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <game+0x340>
	check();
     600:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0xA0;
     604:	80 91 0e 02 	lds	r24, 0x020E
     608:	90 91 0f 02 	lds	r25, 0x020F
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	11 f4       	brne	.+4      	; 0x614 <game+0x358>
     610:	80 ea       	ldi	r24, 0xA0	; 160
     612:	01 c0       	rjmp	.+2      	; 0x616 <game+0x35a>
	else PORTD = 0x20;
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     618:	60 91 00 01 	lds	r22, 0x0100
     61c:	70 91 01 01 	lds	r23, 0x0101
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     62c:	5b 01       	movw	r10, r22
     62e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	4a e7       	ldi	r20, 0x7A	; 122
     636:	53 e4       	ldi	r21, 0x43	; 67
     638:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     63c:	7b 01       	movw	r14, r22
     63e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e8       	ldi	r20, 0x80	; 128
     646:	5f e3       	ldi	r21, 0x3F	; 63
     648:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     64c:	88 23       	and	r24, r24
     64e:	1c f4       	brge	.+6      	; 0x656 <game+0x39a>
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	24 c0       	rjmp	.+72     	; 0x69e <game+0x3e2>
		__ticks = 1;
	else if (__tmp > 65535)
     656:	c8 01       	movw	r24, r16
     658:	b7 01       	movw	r22, r14
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	3f ef       	ldi	r19, 0xFF	; 255
     65e:	4f e7       	ldi	r20, 0x7F	; 127
     660:	57 e4       	ldi	r21, 0x47	; 71
     662:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     666:	18 16       	cp	r1, r24
     668:	b4 f4       	brge	.+44     	; 0x696 <game+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66a:	c6 01       	movw	r24, r12
     66c:	b5 01       	movw	r22, r10
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     67a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     67e:	89 e1       	ldi	r24, 0x19	; 25
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	05 c0       	rjmp	.+10     	; 0x68e <game+0x3d2>
     684:	fc 01       	movw	r30, r24
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <game+0x3ca>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68a:	61 50       	subi	r22, 0x01	; 1
     68c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68e:	61 15       	cp	r22, r1
     690:	71 05       	cpc	r23, r1
     692:	c1 f7       	brne	.-16     	; 0x684 <game+0x3c8>
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <game+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     696:	c8 01       	movw	r24, r16
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     69e:	cb 01       	movw	r24, r22
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <game+0x3e4>
	check();
     6a4:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0xC0;
     6a8:	80 91 0e 02 	lds	r24, 0x020E
     6ac:	90 91 0f 02 	lds	r25, 0x020F
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <game+0x3fc>
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <game+0x3fe>
	else PORTD = 0x40;
     6b8:	80 e4       	ldi	r24, 0x40	; 64
     6ba:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     6bc:	60 91 00 01 	lds	r22, 0x0100
     6c0:	70 91 01 01 	lds	r23, 0x0101
     6c4:	88 27       	eor	r24, r24
     6c6:	77 fd       	sbrc	r23, 7
     6c8:	80 95       	com	r24
     6ca:	98 2f       	mov	r25, r24
     6cc:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     6d0:	5b 01       	movw	r10, r22
     6d2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	4a e7       	ldi	r20, 0x7A	; 122
     6da:	53 e4       	ldi	r21, 0x43	; 67
     6dc:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     6e0:	7b 01       	movw	r14, r22
     6e2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     6f0:	88 23       	and	r24, r24
     6f2:	1c f4       	brge	.+6      	; 0x6fa <game+0x43e>
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	24 c0       	rjmp	.+72     	; 0x742 <game+0x486>
		__ticks = 1;
	else if (__tmp > 65535)
     6fa:	c8 01       	movw	r24, r16
     6fc:	b7 01       	movw	r22, r14
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	3f ef       	ldi	r19, 0xFF	; 255
     702:	4f e7       	ldi	r20, 0x7F	; 127
     704:	57 e4       	ldi	r21, 0x47	; 71
     706:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     70a:	18 16       	cp	r1, r24
     70c:	b4 f4       	brge	.+44     	; 0x73a <game+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     70e:	c6 01       	movw	r24, r12
     710:	b5 01       	movw	r22, r10
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e2       	ldi	r20, 0x20	; 32
     718:	51 e4       	ldi	r21, 0x41	; 65
     71a:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     71e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     722:	89 e1       	ldi	r24, 0x19	; 25
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	05 c0       	rjmp	.+10     	; 0x732 <game+0x476>
     728:	fc 01       	movw	r30, r24
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <game+0x46e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     72e:	61 50       	subi	r22, 0x01	; 1
     730:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	61 15       	cp	r22, r1
     734:	71 05       	cpc	r23, r1
     736:	c1 f7       	brne	.-16     	; 0x728 <game+0x46c>
     738:	07 c0       	rjmp	.+14     	; 0x748 <game+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73a:	c8 01       	movw	r24, r16
     73c:	b7 01       	movw	r22, r14
     73e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     742:	cb 01       	movw	r24, r22
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <game+0x488>
	check();
     748:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0xA0;
     74c:	80 91 0e 02 	lds	r24, 0x020E
     750:	90 91 0f 02 	lds	r25, 0x020F
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	11 f4       	brne	.+4      	; 0x75c <game+0x4a0>
     758:	80 ea       	ldi	r24, 0xA0	; 160
     75a:	01 c0       	rjmp	.+2      	; 0x75e <game+0x4a2>
	else PORTD = 0x20;
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     760:	60 91 00 01 	lds	r22, 0x0100
     764:	70 91 01 01 	lds	r23, 0x0101
     768:	88 27       	eor	r24, r24
     76a:	77 fd       	sbrc	r23, 7
     76c:	80 95       	com	r24
     76e:	98 2f       	mov	r25, r24
     770:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     774:	5b 01       	movw	r10, r22
     776:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	4a e7       	ldi	r20, 0x7A	; 122
     77e:	53 e4       	ldi	r21, 0x43	; 67
     780:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     784:	7b 01       	movw	r14, r22
     786:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e8       	ldi	r20, 0x80	; 128
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     794:	88 23       	and	r24, r24
     796:	1c f4       	brge	.+6      	; 0x79e <game+0x4e2>
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	24 c0       	rjmp	.+72     	; 0x7e6 <game+0x52a>
		__ticks = 1;
	else if (__tmp > 65535)
     79e:	c8 01       	movw	r24, r16
     7a0:	b7 01       	movw	r22, r14
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	3f ef       	ldi	r19, 0xFF	; 255
     7a6:	4f e7       	ldi	r20, 0x7F	; 127
     7a8:	57 e4       	ldi	r21, 0x47	; 71
     7aa:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	b4 f4       	brge	.+44     	; 0x7de <game+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b2:	c6 01       	movw	r24, r12
     7b4:	b5 01       	movw	r22, r10
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     7c2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     7c6:	89 e1       	ldi	r24, 0x19	; 25
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <game+0x51a>
     7cc:	fc 01       	movw	r30, r24
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <game+0x512>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	61 50       	subi	r22, 0x01	; 1
     7d4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d6:	61 15       	cp	r22, r1
     7d8:	71 05       	cpc	r23, r1
     7da:	c1 f7       	brne	.-16     	; 0x7cc <game+0x510>
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <game+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7de:	c8 01       	movw	r24, r16
     7e0:	b7 01       	movw	r22, r14
     7e2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     7e6:	cb 01       	movw	r24, r22
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <game+0x52c>
	check();
     7ec:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x90;
     7f0:	80 91 0e 02 	lds	r24, 0x020E
     7f4:	90 91 0f 02 	lds	r25, 0x020F
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	11 f4       	brne	.+4      	; 0x800 <game+0x544>
     7fc:	80 e9       	ldi	r24, 0x90	; 144
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <game+0x546>
	else PORTD = 0x10;
     800:	80 e1       	ldi	r24, 0x10	; 16
     802:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     804:	60 91 00 01 	lds	r22, 0x0100
     808:	70 91 01 01 	lds	r23, 0x0101
     80c:	88 27       	eor	r24, r24
     80e:	77 fd       	sbrc	r23, 7
     810:	80 95       	com	r24
     812:	98 2f       	mov	r25, r24
     814:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     818:	5b 01       	movw	r10, r22
     81a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	4a e7       	ldi	r20, 0x7A	; 122
     822:	53 e4       	ldi	r21, 0x43	; 67
     824:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e8       	ldi	r20, 0x80	; 128
     832:	5f e3       	ldi	r21, 0x3F	; 63
     834:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     838:	88 23       	and	r24, r24
     83a:	1c f4       	brge	.+6      	; 0x842 <game+0x586>
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	24 c0       	rjmp	.+72     	; 0x88a <game+0x5ce>
		__ticks = 1;
	else if (__tmp > 65535)
     842:	c8 01       	movw	r24, r16
     844:	b7 01       	movw	r22, r14
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	3f ef       	ldi	r19, 0xFF	; 255
     84a:	4f e7       	ldi	r20, 0x7F	; 127
     84c:	57 e4       	ldi	r21, 0x47	; 71
     84e:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     852:	18 16       	cp	r1, r24
     854:	b4 f4       	brge	.+44     	; 0x882 <game+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     856:	c6 01       	movw	r24, r12
     858:	b5 01       	movw	r22, r10
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e2       	ldi	r20, 0x20	; 32
     860:	51 e4       	ldi	r21, 0x41	; 65
     862:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     866:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     86a:	89 e1       	ldi	r24, 0x19	; 25
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <game+0x5be>
     870:	fc 01       	movw	r30, r24
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <game+0x5b6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	61 50       	subi	r22, 0x01	; 1
     878:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87a:	61 15       	cp	r22, r1
     87c:	71 05       	cpc	r23, r1
     87e:	c1 f7       	brne	.-16     	; 0x870 <game+0x5b4>
     880:	07 c0       	rjmp	.+14     	; 0x890 <game+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     882:	c8 01       	movw	r24, r16
     884:	b7 01       	movw	r22, r14
     886:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     88a:	cb 01       	movw	r24, r22
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <game+0x5d0>
	check();
     890:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x88;
     894:	80 91 0e 02 	lds	r24, 0x020E
     898:	90 91 0f 02 	lds	r25, 0x020F
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	11 f4       	brne	.+4      	; 0x8a4 <game+0x5e8>
     8a0:	88 e8       	ldi	r24, 0x88	; 136
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <game+0x5ea>
	else PORTD = 0x08;
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     8a8:	60 91 00 01 	lds	r22, 0x0100
     8ac:	70 91 01 01 	lds	r23, 0x0101
     8b0:	88 27       	eor	r24, r24
     8b2:	77 fd       	sbrc	r23, 7
     8b4:	80 95       	com	r24
     8b6:	98 2f       	mov	r25, r24
     8b8:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     8bc:	5b 01       	movw	r10, r22
     8be:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a e7       	ldi	r20, 0x7A	; 122
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     8cc:	7b 01       	movw	r14, r22
     8ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	1c f4       	brge	.+6      	; 0x8e6 <game+0x62a>
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	24 c0       	rjmp	.+72     	; 0x92e <__stack+0x2f>
		__ticks = 1;
	else if (__tmp > 65535)
     8e6:	c8 01       	movw	r24, r16
     8e8:	b7 01       	movw	r22, r14
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	3f ef       	ldi	r19, 0xFF	; 255
     8ee:	4f e7       	ldi	r20, 0x7F	; 127
     8f0:	57 e4       	ldi	r21, 0x47	; 71
     8f2:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	b4 f4       	brge	.+44     	; 0x926 <__stack+0x27>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8fa:	c6 01       	movw	r24, r12
     8fc:	b5 01       	movw	r22, r10
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e2       	ldi	r20, 0x20	; 32
     904:	51 e4       	ldi	r21, 0x41	; 65
     906:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     90a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     90e:	89 e1       	ldi	r24, 0x19	; 25
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
     914:	fc 01       	movw	r30, r24
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0x17>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	61 50       	subi	r22, 0x01	; 1
     91c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91e:	61 15       	cp	r22, r1
     920:	71 05       	cpc	r23, r1
     922:	c1 f7       	brne	.-16     	; 0x914 <__stack+0x15>
     924:	07 c0       	rjmp	.+14     	; 0x934 <__stack+0x35>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     926:	c8 01       	movw	r24, r16
     928:	b7 01       	movw	r22, r14
     92a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     92e:	cb 01       	movw	r24, r22
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <__stack+0x31>
	check();
     934:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x84;
     938:	80 91 0e 02 	lds	r24, 0x020E
     93c:	90 91 0f 02 	lds	r25, 0x020F
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	11 f4       	brne	.+4      	; 0x948 <__stack+0x49>
     944:	84 e8       	ldi	r24, 0x84	; 132
     946:	01 c0       	rjmp	.+2      	; 0x94a <__stack+0x4b>
	else PORTD = 0x04;
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     94c:	60 91 00 01 	lds	r22, 0x0100
     950:	70 91 01 01 	lds	r23, 0x0101
     954:	88 27       	eor	r24, r24
     956:	77 fd       	sbrc	r23, 7
     958:	80 95       	com	r24
     95a:	98 2f       	mov	r25, r24
     95c:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     960:	5b 01       	movw	r10, r22
     962:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4a e7       	ldi	r20, 0x7A	; 122
     96a:	53 e4       	ldi	r21, 0x43	; 67
     96c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     970:	7b 01       	movw	r14, r22
     972:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e8       	ldi	r20, 0x80	; 128
     97a:	5f e3       	ldi	r21, 0x3F	; 63
     97c:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     980:	88 23       	and	r24, r24
     982:	1c f4       	brge	.+6      	; 0x98a <__stack+0x8b>
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	24 c0       	rjmp	.+72     	; 0x9d2 <__stack+0xd3>
		__ticks = 1;
	else if (__tmp > 65535)
     98a:	c8 01       	movw	r24, r16
     98c:	b7 01       	movw	r22, r14
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	3f ef       	ldi	r19, 0xFF	; 255
     992:	4f e7       	ldi	r20, 0x7F	; 127
     994:	57 e4       	ldi	r21, 0x47	; 71
     996:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     99a:	18 16       	cp	r1, r24
     99c:	b4 f4       	brge	.+44     	; 0x9ca <__stack+0xcb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     99e:	c6 01       	movw	r24, r12
     9a0:	b5 01       	movw	r22, r10
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e2       	ldi	r20, 0x20	; 32
     9a8:	51 e4       	ldi	r21, 0x41	; 65
     9aa:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     9ae:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     9b2:	89 e1       	ldi	r24, 0x19	; 25
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <__stack+0xc3>
     9b8:	fc 01       	movw	r30, r24
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <__stack+0xbb>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9be:	61 50       	subi	r22, 0x01	; 1
     9c0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	c1 f7       	brne	.-16     	; 0x9b8 <__stack+0xb9>
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <__stack+0xd9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ca:	c8 01       	movw	r24, r16
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     9d2:	cb 01       	movw	r24, r22
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <__stack+0xd5>
	check();
     9d8:	0e 94 b8 00 	call	0x170	; 0x170 <check>
	if (display_g == 1) PORTD = 0x82;
     9dc:	80 91 0e 02 	lds	r24, 0x020E
     9e0:	90 91 0f 02 	lds	r25, 0x020F
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	11 f4       	brne	.+4      	; 0x9ec <__stack+0xed>
     9e8:	82 e8       	ldi	r24, 0x82	; 130
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <__stack+0xef>
	else PORTD = 0x02;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	8b b9       	out	0x0b, r24	; 11
	_delay_ms(delay);
     9f0:	60 91 00 01 	lds	r22, 0x0100
     9f4:	70 91 01 01 	lds	r23, 0x0101
     9f8:	88 27       	eor	r24, r24
     9fa:	77 fd       	sbrc	r23, 7
     9fc:	80 95       	com	r24
     9fe:	98 2f       	mov	r25, r24
     a00:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     a04:	5b 01       	movw	r10, r22
     a06:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a e7       	ldi	r20, 0x7A	; 122
     a0e:	53 e4       	ldi	r21, 0x43	; 67
     a10:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     a14:	7b 01       	movw	r14, r22
     a16:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e8       	ldi	r20, 0x80	; 128
     a1e:	5f e3       	ldi	r21, 0x3F	; 63
     a20:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     a24:	88 23       	and	r24, r24
     a26:	1c f4       	brge	.+6      	; 0xa2e <__stack+0x12f>
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	24 c0       	rjmp	.+72     	; 0xa76 <__stack+0x177>
		__ticks = 1;
	else if (__tmp > 65535)
     a2e:	c8 01       	movw	r24, r16
     a30:	b7 01       	movw	r22, r14
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	57 e4       	ldi	r21, 0x47	; 71
     a3a:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     a3e:	18 16       	cp	r1, r24
     a40:	b4 f4       	brge	.+44     	; 0xa6e <__stack+0x16f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a42:	c6 01       	movw	r24, r12
     a44:	b5 01       	movw	r22, r10
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e2       	ldi	r20, 0x20	; 32
     a4c:	51 e4       	ldi	r21, 0x41	; 65
     a4e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     a52:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a56:	89 e1       	ldi	r24, 0x19	; 25
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__stack+0x167>
     a5c:	fc 01       	movw	r30, r24
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <__stack+0x15f>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a62:	61 50       	subi	r22, 0x01	; 1
     a64:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a66:	61 15       	cp	r22, r1
     a68:	71 05       	cpc	r23, r1
     a6a:	c1 f7       	brne	.-16     	; 0xa5c <__stack+0x15d>
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__stack+0x17d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6e:	c8 01       	movw	r24, r16
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a76:	cb 01       	movw	r24, r22
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <__stack+0x179>
	check();
     a7c:	0e 94 b8 00 	call	0x170	; 0x170 <check>
}
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	08 95       	ret

00000a92 <main>:
int difficulty = 25;
int display_g = 0;

int main(void)
{
	DDRD = 0xFF;	//Leds
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00; 	//Button
     a96:	14 b8       	out	0x04, r1	; 4
	DDRC = 0xFF; 	//Display
     a98:	87 b9       	out	0x07, r24	; 7
	
	display(0);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 53 00 	call	0xa6	; 0xa6 <display>

	while (1)
	{
		game();
     aa2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <game>
     aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <main+0x10>

00000aa8 <__fixunssfsi>:
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	7b 01       	movw	r14, r22
     ab2:	8c 01       	movw	r16, r24
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	5f e4       	ldi	r21, 0x4F	; 79
     abc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__gesf2>
     ac0:	88 23       	and	r24, r24
     ac2:	8c f0       	brlt	.+34     	; 0xae6 <__fixunssfsi+0x3e>
     ac4:	c8 01       	movw	r24, r16
     ac6:	b7 01       	movw	r22, r14
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	5f e4       	ldi	r21, 0x4F	; 79
     ad0:	0e 94 cc 06 	call	0xd98	; 0xd98 <__subsf3>
     ad4:	0e 94 12 09 	call	0x1224	; 0x1224 <__fixsfsi>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	20 50       	subi	r18, 0x00	; 0
     ade:	30 40       	sbci	r19, 0x00	; 0
     ae0:	40 40       	sbci	r20, 0x00	; 0
     ae2:	50 48       	sbci	r21, 0x80	; 128
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <__fixunssfsi+0x4a>
     ae6:	c8 01       	movw	r24, r16
     ae8:	b7 01       	movw	r22, r14
     aea:	0e 94 12 09 	call	0x1224	; 0x1224 <__fixsfsi>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	b9 01       	movw	r22, r18
     af4:	ca 01       	movw	r24, r20
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <_fpadd_parts>:
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__>
     b0c:	dc 01       	movw	r26, r24
     b0e:	2b 01       	movw	r4, r22
     b10:	fa 01       	movw	r30, r20
     b12:	9c 91       	ld	r25, X
     b14:	92 30       	cpi	r25, 0x02	; 2
     b16:	08 f4       	brcc	.+2      	; 0xb1a <_fpadd_parts+0x1a>
     b18:	39 c1       	rjmp	.+626    	; 0xd8c <_fpadd_parts+0x28c>
     b1a:	eb 01       	movw	r28, r22
     b1c:	88 81       	ld	r24, Y
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	08 f4       	brcc	.+2      	; 0xb24 <_fpadd_parts+0x24>
     b22:	33 c1       	rjmp	.+614    	; 0xd8a <_fpadd_parts+0x28a>
     b24:	94 30       	cpi	r25, 0x04	; 4
     b26:	69 f4       	brne	.+26     	; 0xb42 <_fpadd_parts+0x42>
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	09 f0       	breq	.+2      	; 0xb2e <_fpadd_parts+0x2e>
     b2c:	2f c1       	rjmp	.+606    	; 0xd8c <_fpadd_parts+0x28c>
     b2e:	11 96       	adiw	r26, 0x01	; 1
     b30:	9c 91       	ld	r25, X
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	98 17       	cp	r25, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <_fpadd_parts+0x3c>
     b3a:	28 c1       	rjmp	.+592    	; 0xd8c <_fpadd_parts+0x28c>
     b3c:	a4 e0       	ldi	r26, 0x04	; 4
     b3e:	b1 e0       	ldi	r27, 0x01	; 1
     b40:	25 c1       	rjmp	.+586    	; 0xd8c <_fpadd_parts+0x28c>
     b42:	84 30       	cpi	r24, 0x04	; 4
     b44:	09 f4       	brne	.+2      	; 0xb48 <_fpadd_parts+0x48>
     b46:	21 c1       	rjmp	.+578    	; 0xd8a <_fpadd_parts+0x28a>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	a9 f4       	brne	.+42     	; 0xb76 <_fpadd_parts+0x76>
     b4c:	92 30       	cpi	r25, 0x02	; 2
     b4e:	09 f0       	breq	.+2      	; 0xb52 <_fpadd_parts+0x52>
     b50:	1d c1       	rjmp	.+570    	; 0xd8c <_fpadd_parts+0x28c>
     b52:	9a 01       	movw	r18, r20
     b54:	ad 01       	movw	r20, r26
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	ea 01       	movw	r28, r20
     b5a:	09 90       	ld	r0, Y+
     b5c:	ae 01       	movw	r20, r28
     b5e:	e9 01       	movw	r28, r18
     b60:	09 92       	st	Y+, r0
     b62:	9e 01       	movw	r18, r28
     b64:	81 50       	subi	r24, 0x01	; 1
     b66:	c1 f7       	brne	.-16     	; 0xb58 <_fpadd_parts+0x58>
     b68:	e2 01       	movw	r28, r4
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	9c 91       	ld	r25, X
     b70:	89 23       	and	r24, r25
     b72:	81 83       	std	Z+1, r24	; 0x01
     b74:	08 c1       	rjmp	.+528    	; 0xd86 <_fpadd_parts+0x286>
     b76:	92 30       	cpi	r25, 0x02	; 2
     b78:	09 f4       	brne	.+2      	; 0xb7c <_fpadd_parts+0x7c>
     b7a:	07 c1       	rjmp	.+526    	; 0xd8a <_fpadd_parts+0x28a>
     b7c:	12 96       	adiw	r26, 0x02	; 2
     b7e:	2d 90       	ld	r2, X+
     b80:	3c 90       	ld	r3, X
     b82:	13 97       	sbiw	r26, 0x03	; 3
     b84:	eb 01       	movw	r28, r22
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	14 96       	adiw	r26, 0x04	; 4
     b8c:	ad 90       	ld	r10, X+
     b8e:	bd 90       	ld	r11, X+
     b90:	cd 90       	ld	r12, X+
     b92:	dc 90       	ld	r13, X
     b94:	17 97       	sbiw	r26, 0x07	; 7
     b96:	ec 80       	ldd	r14, Y+4	; 0x04
     b98:	fd 80       	ldd	r15, Y+5	; 0x05
     b9a:	0e 81       	ldd	r16, Y+6	; 0x06
     b9c:	1f 81       	ldd	r17, Y+7	; 0x07
     b9e:	91 01       	movw	r18, r2
     ba0:	28 1b       	sub	r18, r24
     ba2:	39 0b       	sbc	r19, r25
     ba4:	b9 01       	movw	r22, r18
     ba6:	37 ff       	sbrs	r19, 7
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <_fpadd_parts+0xb2>
     baa:	66 27       	eor	r22, r22
     bac:	77 27       	eor	r23, r23
     bae:	62 1b       	sub	r22, r18
     bb0:	73 0b       	sbc	r23, r19
     bb2:	60 32       	cpi	r22, 0x20	; 32
     bb4:	71 05       	cpc	r23, r1
     bb6:	0c f0       	brlt	.+2      	; 0xbba <_fpadd_parts+0xba>
     bb8:	61 c0       	rjmp	.+194    	; 0xc7c <_fpadd_parts+0x17c>
     bba:	12 16       	cp	r1, r18
     bbc:	13 06       	cpc	r1, r19
     bbe:	6c f5       	brge	.+90     	; 0xc1a <_fpadd_parts+0x11a>
     bc0:	37 01       	movw	r6, r14
     bc2:	48 01       	movw	r8, r16
     bc4:	06 2e       	mov	r0, r22
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <_fpadd_parts+0xd0>
     bc8:	96 94       	lsr	r9
     bca:	87 94       	ror	r8
     bcc:	77 94       	ror	r7
     bce:	67 94       	ror	r6
     bd0:	0a 94       	dec	r0
     bd2:	d2 f7       	brpl	.-12     	; 0xbc8 <_fpadd_parts+0xc8>
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <_fpadd_parts+0xe6>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	44 1f       	adc	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	6a 95       	dec	r22
     be8:	d2 f7       	brpl	.-12     	; 0xbde <_fpadd_parts+0xde>
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	30 40       	sbci	r19, 0x00	; 0
     bee:	40 40       	sbci	r20, 0x00	; 0
     bf0:	50 40       	sbci	r21, 0x00	; 0
     bf2:	2e 21       	and	r18, r14
     bf4:	3f 21       	and	r19, r15
     bf6:	40 23       	and	r20, r16
     bf8:	51 23       	and	r21, r17
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	41 05       	cpc	r20, r1
     c00:	51 05       	cpc	r21, r1
     c02:	21 f0       	breq	.+8      	; 0xc0c <_fpadd_parts+0x10c>
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	79 01       	movw	r14, r18
     c0e:	8a 01       	movw	r16, r20
     c10:	e6 28       	or	r14, r6
     c12:	f7 28       	or	r15, r7
     c14:	08 29       	or	r16, r8
     c16:	19 29       	or	r17, r9
     c18:	3c c0       	rjmp	.+120    	; 0xc92 <_fpadd_parts+0x192>
     c1a:	23 2b       	or	r18, r19
     c1c:	d1 f1       	breq	.+116    	; 0xc92 <_fpadd_parts+0x192>
     c1e:	26 0e       	add	r2, r22
     c20:	37 1e       	adc	r3, r23
     c22:	35 01       	movw	r6, r10
     c24:	46 01       	movw	r8, r12
     c26:	06 2e       	mov	r0, r22
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <_fpadd_parts+0x132>
     c2a:	96 94       	lsr	r9
     c2c:	87 94       	ror	r8
     c2e:	77 94       	ror	r7
     c30:	67 94       	ror	r6
     c32:	0a 94       	dec	r0
     c34:	d2 f7       	brpl	.-12     	; 0xc2a <_fpadd_parts+0x12a>
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <_fpadd_parts+0x148>
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	44 1f       	adc	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	6a 95       	dec	r22
     c4a:	d2 f7       	brpl	.-12     	; 0xc40 <_fpadd_parts+0x140>
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	30 40       	sbci	r19, 0x00	; 0
     c50:	40 40       	sbci	r20, 0x00	; 0
     c52:	50 40       	sbci	r21, 0x00	; 0
     c54:	2a 21       	and	r18, r10
     c56:	3b 21       	and	r19, r11
     c58:	4c 21       	and	r20, r12
     c5a:	5d 21       	and	r21, r13
     c5c:	21 15       	cp	r18, r1
     c5e:	31 05       	cpc	r19, r1
     c60:	41 05       	cpc	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	21 f0       	breq	.+8      	; 0xc6e <_fpadd_parts+0x16e>
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	59 01       	movw	r10, r18
     c70:	6a 01       	movw	r12, r20
     c72:	a6 28       	or	r10, r6
     c74:	b7 28       	or	r11, r7
     c76:	c8 28       	or	r12, r8
     c78:	d9 28       	or	r13, r9
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <_fpadd_parts+0x192>
     c7c:	82 15       	cp	r24, r2
     c7e:	93 05       	cpc	r25, r3
     c80:	2c f0       	brlt	.+10     	; 0xc8c <_fpadd_parts+0x18c>
     c82:	1c 01       	movw	r2, r24
     c84:	aa 24       	eor	r10, r10
     c86:	bb 24       	eor	r11, r11
     c88:	65 01       	movw	r12, r10
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <_fpadd_parts+0x192>
     c8c:	ee 24       	eor	r14, r14
     c8e:	ff 24       	eor	r15, r15
     c90:	87 01       	movw	r16, r14
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	9c 91       	ld	r25, X
     c96:	d2 01       	movw	r26, r4
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	8c 91       	ld	r24, X
     c9c:	98 17       	cp	r25, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <_fpadd_parts+0x1a2>
     ca0:	45 c0       	rjmp	.+138    	; 0xd2c <_fpadd_parts+0x22c>
     ca2:	99 23       	and	r25, r25
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <_fpadd_parts+0x1b4>
     ca6:	a8 01       	movw	r20, r16
     ca8:	97 01       	movw	r18, r14
     caa:	2a 19       	sub	r18, r10
     cac:	3b 09       	sbc	r19, r11
     cae:	4c 09       	sbc	r20, r12
     cb0:	5d 09       	sbc	r21, r13
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <_fpadd_parts+0x1c0>
     cb4:	a6 01       	movw	r20, r12
     cb6:	95 01       	movw	r18, r10
     cb8:	2e 19       	sub	r18, r14
     cba:	3f 09       	sbc	r19, r15
     cbc:	40 0b       	sbc	r20, r16
     cbe:	51 0b       	sbc	r21, r17
     cc0:	57 fd       	sbrc	r21, 7
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <_fpadd_parts+0x1d4>
     cc4:	11 82       	std	Z+1, r1	; 0x01
     cc6:	33 82       	std	Z+3, r3	; 0x03
     cc8:	22 82       	std	Z+2, r2	; 0x02
     cca:	24 83       	std	Z+4, r18	; 0x04
     ccc:	35 83       	std	Z+5, r19	; 0x05
     cce:	46 83       	std	Z+6, r20	; 0x06
     cd0:	57 83       	std	Z+7, r21	; 0x07
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <_fpadd_parts+0x20e>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	81 83       	std	Z+1, r24	; 0x01
     cd8:	33 82       	std	Z+3, r3	; 0x03
     cda:	22 82       	std	Z+2, r2	; 0x02
     cdc:	88 27       	eor	r24, r24
     cde:	99 27       	eor	r25, r25
     ce0:	dc 01       	movw	r26, r24
     ce2:	82 1b       	sub	r24, r18
     ce4:	93 0b       	sbc	r25, r19
     ce6:	a4 0b       	sbc	r26, r20
     ce8:	b5 0b       	sbc	r27, r21
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	95 83       	std	Z+5, r25	; 0x05
     cee:	a6 83       	std	Z+6, r26	; 0x06
     cf0:	b7 83       	std	Z+7, r27	; 0x07
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <_fpadd_parts+0x20e>
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	24 83       	std	Z+4, r18	; 0x04
     cfe:	35 83       	std	Z+5, r19	; 0x05
     d00:	46 83       	std	Z+6, r20	; 0x06
     d02:	57 83       	std	Z+7, r21	; 0x07
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	93 83       	std	Z+3, r25	; 0x03
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	24 81       	ldd	r18, Z+4	; 0x04
     d10:	35 81       	ldd	r19, Z+5	; 0x05
     d12:	46 81       	ldd	r20, Z+6	; 0x06
     d14:	57 81       	ldd	r21, Z+7	; 0x07
     d16:	da 01       	movw	r26, r20
     d18:	c9 01       	movw	r24, r18
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	a1 09       	sbc	r26, r1
     d1e:	b1 09       	sbc	r27, r1
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	af 4f       	sbci	r26, 0xFF	; 255
     d26:	bf 43       	sbci	r27, 0x3F	; 63
     d28:	28 f3       	brcs	.-54     	; 0xcf4 <_fpadd_parts+0x1f4>
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <_fpadd_parts+0x242>
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	33 82       	std	Z+3, r3	; 0x03
     d30:	22 82       	std	Z+2, r2	; 0x02
     d32:	ea 0c       	add	r14, r10
     d34:	fb 1c       	adc	r15, r11
     d36:	0c 1d       	adc	r16, r12
     d38:	1d 1d       	adc	r17, r13
     d3a:	e4 82       	std	Z+4, r14	; 0x04
     d3c:	f5 82       	std	Z+5, r15	; 0x05
     d3e:	06 83       	std	Z+6, r16	; 0x06
     d40:	17 83       	std	Z+7, r17	; 0x07
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	80 83       	st	Z, r24
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	35 81       	ldd	r19, Z+5	; 0x05
     d4a:	46 81       	ldd	r20, Z+6	; 0x06
     d4c:	57 81       	ldd	r21, Z+7	; 0x07
     d4e:	57 ff       	sbrs	r21, 7
     d50:	1a c0       	rjmp	.+52     	; 0xd86 <_fpadd_parts+0x286>
     d52:	c9 01       	movw	r24, r18
     d54:	aa 27       	eor	r26, r26
     d56:	97 fd       	sbrc	r25, 7
     d58:	a0 95       	com	r26
     d5a:	ba 2f       	mov	r27, r26
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	a0 70       	andi	r26, 0x00	; 0
     d62:	b0 70       	andi	r27, 0x00	; 0
     d64:	56 95       	lsr	r21
     d66:	47 95       	ror	r20
     d68:	37 95       	ror	r19
     d6a:	27 95       	ror	r18
     d6c:	82 2b       	or	r24, r18
     d6e:	93 2b       	or	r25, r19
     d70:	a4 2b       	or	r26, r20
     d72:	b5 2b       	or	r27, r21
     d74:	84 83       	std	Z+4, r24	; 0x04
     d76:	95 83       	std	Z+5, r25	; 0x05
     d78:	a6 83       	std	Z+6, r26	; 0x06
     d7a:	b7 83       	std	Z+7, r27	; 0x07
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	93 83       	std	Z+3, r25	; 0x03
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	df 01       	movw	r26, r30
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_fpadd_parts+0x28c>
     d8a:	d2 01       	movw	r26, r4
     d8c:	cd 01       	movw	r24, r26
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	e2 e1       	ldi	r30, 0x12	; 18
     d94:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__epilogue_restores__>

00000d98 <__subsf3>:
     d98:	a0 e2       	ldi	r26, 0x20	; 32
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x18>
     da4:	69 83       	std	Y+1, r22	; 0x01
     da6:	7a 83       	std	Y+2, r23	; 0x02
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	3e 83       	std	Y+6, r19	; 0x06
     db0:	4f 83       	std	Y+7, r20	; 0x07
     db2:	58 87       	std	Y+8, r21	; 0x08
     db4:	e9 e0       	ldi	r30, 0x09	; 9
     db6:	ee 2e       	mov	r14, r30
     db8:	f1 2c       	mov	r15, r1
     dba:	ec 0e       	add	r14, r28
     dbc:	fd 1e       	adc	r15, r29
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	b7 01       	movw	r22, r14
     dc4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     dc8:	8e 01       	movw	r16, r28
     dca:	0f 5e       	subi	r16, 0xEF	; 239
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	ce 01       	movw	r24, r28
     dd0:	05 96       	adiw	r24, 0x05	; 5
     dd2:	b8 01       	movw	r22, r16
     dd4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     dd8:	8a 89       	ldd	r24, Y+18	; 0x12
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	89 27       	eor	r24, r25
     dde:	8a 8b       	std	Y+18, r24	; 0x12
     de0:	c7 01       	movw	r24, r14
     de2:	b8 01       	movw	r22, r16
     de4:	ae 01       	movw	r20, r28
     de6:	47 5e       	subi	r20, 0xE7	; 231
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	0e 94 80 05 	call	0xb00	; 0xb00 <_fpadd_parts>
     dee:	0e 94 b5 09 	call	0x136a	; 0x136a <__pack_f>
     df2:	a0 96       	adiw	r28, 0x20	; 32
     df4:	e6 e0       	ldi	r30, 0x06	; 6
     df6:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x18>

00000dfa <__addsf3>:
     dfa:	a0 e2       	ldi	r26, 0x20	; 32
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e3 e0       	ldi	r30, 0x03	; 3
     e00:	f7 e0       	ldi	r31, 0x07	; 7
     e02:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x18>
     e06:	69 83       	std	Y+1, r22	; 0x01
     e08:	7a 83       	std	Y+2, r23	; 0x02
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	2d 83       	std	Y+5, r18	; 0x05
     e10:	3e 83       	std	Y+6, r19	; 0x06
     e12:	4f 83       	std	Y+7, r20	; 0x07
     e14:	58 87       	std	Y+8, r21	; 0x08
     e16:	f9 e0       	ldi	r31, 0x09	; 9
     e18:	ef 2e       	mov	r14, r31
     e1a:	f1 2c       	mov	r15, r1
     e1c:	ec 0e       	add	r14, r28
     e1e:	fd 1e       	adc	r15, r29
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	b7 01       	movw	r22, r14
     e26:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     e2a:	8e 01       	movw	r16, r28
     e2c:	0f 5e       	subi	r16, 0xEF	; 239
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	ce 01       	movw	r24, r28
     e32:	05 96       	adiw	r24, 0x05	; 5
     e34:	b8 01       	movw	r22, r16
     e36:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     e3a:	c7 01       	movw	r24, r14
     e3c:	b8 01       	movw	r22, r16
     e3e:	ae 01       	movw	r20, r28
     e40:	47 5e       	subi	r20, 0xE7	; 231
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	0e 94 80 05 	call	0xb00	; 0xb00 <_fpadd_parts>
     e48:	0e 94 b5 09 	call	0x136a	; 0x136a <__pack_f>
     e4c:	a0 96       	adiw	r28, 0x20	; 32
     e4e:	e6 e0       	ldi	r30, 0x06	; 6
     e50:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x18>

00000e54 <__mulsf3>:
     e54:	a0 e2       	ldi	r26, 0x20	; 32
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e0 e3       	ldi	r30, 0x30	; 48
     e5a:	f7 e0       	ldi	r31, 0x07	; 7
     e5c:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__>
     e60:	69 83       	std	Y+1, r22	; 0x01
     e62:	7a 83       	std	Y+2, r23	; 0x02
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	2d 83       	std	Y+5, r18	; 0x05
     e6a:	3e 83       	std	Y+6, r19	; 0x06
     e6c:	4f 83       	std	Y+7, r20	; 0x07
     e6e:	58 87       	std	Y+8, r21	; 0x08
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	be 01       	movw	r22, r28
     e76:	67 5f       	subi	r22, 0xF7	; 247
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     e7e:	ce 01       	movw	r24, r28
     e80:	05 96       	adiw	r24, 0x05	; 5
     e82:	be 01       	movw	r22, r28
     e84:	6f 5e       	subi	r22, 0xEF	; 239
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
     e8c:	99 85       	ldd	r25, Y+9	; 0x09
     e8e:	92 30       	cpi	r25, 0x02	; 2
     e90:	88 f0       	brcs	.+34     	; 0xeb4 <__mulsf3+0x60>
     e92:	89 89       	ldd	r24, Y+17	; 0x11
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	c8 f0       	brcs	.+50     	; 0xeca <__mulsf3+0x76>
     e98:	94 30       	cpi	r25, 0x04	; 4
     e9a:	19 f4       	brne	.+6      	; 0xea2 <__mulsf3+0x4e>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <__mulsf3+0x60>
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__mulsf3+0x56>
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <__mulsf3+0x5c>
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	81 f4       	brne	.+32     	; 0xeca <__mulsf3+0x76>
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	c6 c0       	rjmp	.+396    	; 0x103c <__mulsf3+0x1e8>
     eb0:	92 30       	cpi	r25, 0x02	; 2
     eb2:	49 f4       	brne	.+18     	; 0xec6 <__mulsf3+0x72>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	8a 89       	ldd	r24, Y+18	; 0x12
     eba:	98 13       	cpse	r25, r24
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	2a 87       	std	Y+10, r18	; 0x0a
     ec0:	ce 01       	movw	r24, r28
     ec2:	09 96       	adiw	r24, 0x09	; 9
     ec4:	bb c0       	rjmp	.+374    	; 0x103c <__mulsf3+0x1e8>
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	49 f4       	brne	.+18     	; 0xedc <__mulsf3+0x88>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	8a 89       	ldd	r24, Y+18	; 0x12
     ed0:	98 13       	cpse	r25, r24
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	2a 8b       	std	Y+18, r18	; 0x12
     ed6:	ce 01       	movw	r24, r28
     ed8:	41 96       	adiw	r24, 0x11	; 17
     eda:	b0 c0       	rjmp	.+352    	; 0x103c <__mulsf3+0x1e8>
     edc:	2d 84       	ldd	r2, Y+13	; 0x0d
     ede:	3e 84       	ldd	r3, Y+14	; 0x0e
     ee0:	4f 84       	ldd	r4, Y+15	; 0x0f
     ee2:	58 88       	ldd	r5, Y+16	; 0x10
     ee4:	6d 88       	ldd	r6, Y+21	; 0x15
     ee6:	7e 88       	ldd	r7, Y+22	; 0x16
     ee8:	8f 88       	ldd	r8, Y+23	; 0x17
     eea:	98 8c       	ldd	r9, Y+24	; 0x18
     eec:	ee 24       	eor	r14, r14
     eee:	ff 24       	eor	r15, r15
     ef0:	87 01       	movw	r16, r14
     ef2:	aa 24       	eor	r10, r10
     ef4:	bb 24       	eor	r11, r11
     ef6:	65 01       	movw	r12, r10
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	e0 e0       	ldi	r30, 0x00	; 0
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	c1 01       	movw	r24, r2
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	89 2b       	or	r24, r25
     f0c:	e9 f0       	breq	.+58     	; 0xf48 <__mulsf3+0xf4>
     f0e:	e6 0c       	add	r14, r6
     f10:	f7 1c       	adc	r15, r7
     f12:	08 1d       	adc	r16, r8
     f14:	19 1d       	adc	r17, r9
     f16:	9a 01       	movw	r18, r20
     f18:	ab 01       	movw	r20, r22
     f1a:	2a 0d       	add	r18, r10
     f1c:	3b 1d       	adc	r19, r11
     f1e:	4c 1d       	adc	r20, r12
     f20:	5d 1d       	adc	r21, r13
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 14       	cp	r14, r6
     f2c:	f7 04       	cpc	r15, r7
     f2e:	08 05       	cpc	r16, r8
     f30:	19 05       	cpc	r17, r9
     f32:	20 f4       	brcc	.+8      	; 0xf3c <__mulsf3+0xe8>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ba 01       	movw	r22, r20
     f3e:	a9 01       	movw	r20, r18
     f40:	48 0f       	add	r20, r24
     f42:	59 1f       	adc	r21, r25
     f44:	6a 1f       	adc	r22, r26
     f46:	7b 1f       	adc	r23, r27
     f48:	aa 0c       	add	r10, r10
     f4a:	bb 1c       	adc	r11, r11
     f4c:	cc 1c       	adc	r12, r12
     f4e:	dd 1c       	adc	r13, r13
     f50:	97 fe       	sbrs	r9, 7
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__mulsf3+0x110>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	a8 2a       	or	r10, r24
     f5e:	b9 2a       	or	r11, r25
     f60:	ca 2a       	or	r12, r26
     f62:	db 2a       	or	r13, r27
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	e0 32       	cpi	r30, 0x20	; 32
     f68:	f1 05       	cpc	r31, r1
     f6a:	49 f0       	breq	.+18     	; 0xf7e <__mulsf3+0x12a>
     f6c:	66 0c       	add	r6, r6
     f6e:	77 1c       	adc	r7, r7
     f70:	88 1c       	adc	r8, r8
     f72:	99 1c       	adc	r9, r9
     f74:	56 94       	lsr	r5
     f76:	47 94       	ror	r4
     f78:	37 94       	ror	r3
     f7a:	27 94       	ror	r2
     f7c:	c3 cf       	rjmp	.-122    	; 0xf04 <__mulsf3+0xb0>
     f7e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f80:	ea 89       	ldd	r30, Y+18	; 0x12
     f82:	2b 89       	ldd	r18, Y+19	; 0x13
     f84:	3c 89       	ldd	r19, Y+20	; 0x14
     f86:	8b 85       	ldd	r24, Y+11	; 0x0b
     f88:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8a:	28 0f       	add	r18, r24
     f8c:	39 1f       	adc	r19, r25
     f8e:	2e 5f       	subi	r18, 0xFE	; 254
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	17 c0       	rjmp	.+46     	; 0xfc2 <__mulsf3+0x16e>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	89 2b       	or	r24, r25
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <__mulsf3+0x162>
     f9e:	16 95       	lsr	r17
     fa0:	07 95       	ror	r16
     fa2:	f7 94       	ror	r15
     fa4:	e7 94       	ror	r14
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e8       	ldi	r27, 0x80	; 128
     fae:	e8 2a       	or	r14, r24
     fb0:	f9 2a       	or	r15, r25
     fb2:	0a 2b       	or	r16, r26
     fb4:	1b 2b       	or	r17, r27
     fb6:	76 95       	lsr	r23
     fb8:	67 95       	ror	r22
     fba:	57 95       	ror	r21
     fbc:	47 95       	ror	r20
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	e7 cf       	rjmp	.-50     	; 0xf94 <__mulsf3+0x140>
     fc6:	0c c0       	rjmp	.+24     	; 0xfe0 <__mulsf3+0x18c>
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	17 fd       	sbrc	r17, 7
     fd2:	41 60       	ori	r20, 0x01	; 1
     fd4:	ee 0c       	add	r14, r14
     fd6:	ff 1c       	adc	r15, r15
     fd8:	00 1f       	adc	r16, r16
     fda:	11 1f       	adc	r17, r17
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	30 40       	sbci	r19, 0x00	; 0
     fe0:	40 30       	cpi	r20, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	59 07       	cpc	r21, r25
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	69 07       	cpc	r22, r25
     fea:	90 e4       	ldi	r25, 0x40	; 64
     fec:	79 07       	cpc	r23, r25
     fee:	60 f3       	brcs	.-40     	; 0xfc8 <__mulsf3+0x174>
     ff0:	2b 8f       	std	Y+27, r18	; 0x1b
     ff2:	3c 8f       	std	Y+28, r19	; 0x1c
     ff4:	db 01       	movw	r26, r22
     ff6:	ca 01       	movw	r24, r20
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	61 f4       	brne	.+24     	; 0x1022 <__mulsf3+0x1ce>
    100a:	47 fd       	sbrc	r20, 7
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <__mulsf3+0x1ce>
    100e:	e1 14       	cp	r14, r1
    1010:	f1 04       	cpc	r15, r1
    1012:	01 05       	cpc	r16, r1
    1014:	11 05       	cpc	r17, r1
    1016:	29 f0       	breq	.+10     	; 0x1022 <__mulsf3+0x1ce>
    1018:	40 5c       	subi	r20, 0xC0	; 192
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	6f 4f       	sbci	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	40 78       	andi	r20, 0x80	; 128
    1022:	1a 8e       	std	Y+26, r1	; 0x1a
    1024:	fe 17       	cp	r31, r30
    1026:	11 f0       	breq	.+4      	; 0x102c <__mulsf3+0x1d8>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
    102c:	4d 8f       	std	Y+29, r20	; 0x1d
    102e:	5e 8f       	std	Y+30, r21	; 0x1e
    1030:	6f 8f       	std	Y+31, r22	; 0x1f
    1032:	78 a3       	std	Y+32, r23	; 0x20
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	89 8f       	std	Y+25, r24	; 0x19
    1038:	ce 01       	movw	r24, r28
    103a:	49 96       	adiw	r24, 0x19	; 25
    103c:	0e 94 b5 09 	call	0x136a	; 0x136a <__pack_f>
    1040:	a0 96       	adiw	r28, 0x20	; 32
    1042:	e2 e1       	ldi	r30, 0x12	; 18
    1044:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__epilogue_restores__>

00001048 <__gtsf2>:
    1048:	a8 e1       	ldi	r26, 0x18	; 24
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ea e2       	ldi	r30, 0x2A	; 42
    104e:	f8 e0       	ldi	r31, 0x08	; 8
    1050:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x18>
    1054:	69 83       	std	Y+1, r22	; 0x01
    1056:	7a 83       	std	Y+2, r23	; 0x02
    1058:	8b 83       	std	Y+3, r24	; 0x03
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	2d 83       	std	Y+5, r18	; 0x05
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	4f 83       	std	Y+7, r20	; 0x07
    1062:	58 87       	std	Y+8, r21	; 0x08
    1064:	89 e0       	ldi	r24, 0x09	; 9
    1066:	e8 2e       	mov	r14, r24
    1068:	f1 2c       	mov	r15, r1
    106a:	ec 0e       	add	r14, r28
    106c:	fd 1e       	adc	r15, r29
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	b7 01       	movw	r22, r14
    1074:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    1078:	8e 01       	movw	r16, r28
    107a:	0f 5e       	subi	r16, 0xEF	; 239
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	ce 01       	movw	r24, r28
    1080:	05 96       	adiw	r24, 0x05	; 5
    1082:	b8 01       	movw	r22, r16
    1084:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	40 f0       	brcs	.+16     	; 0x109e <__gtsf2+0x56>
    108e:	89 89       	ldd	r24, Y+17	; 0x11
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	28 f0       	brcs	.+10     	; 0x109e <__gtsf2+0x56>
    1094:	c7 01       	movw	r24, r14
    1096:	b8 01       	movw	r22, r16
    1098:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fpcmp_parts_f>
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <__gtsf2+0x58>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	68 96       	adiw	r28, 0x18	; 24
    10a2:	e6 e0       	ldi	r30, 0x06	; 6
    10a4:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x18>

000010a8 <__gesf2>:
    10a8:	a8 e1       	ldi	r26, 0x18	; 24
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f8 e0       	ldi	r31, 0x08	; 8
    10b0:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x18>
    10b4:	69 83       	std	Y+1, r22	; 0x01
    10b6:	7a 83       	std	Y+2, r23	; 0x02
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	2d 83       	std	Y+5, r18	; 0x05
    10be:	3e 83       	std	Y+6, r19	; 0x06
    10c0:	4f 83       	std	Y+7, r20	; 0x07
    10c2:	58 87       	std	Y+8, r21	; 0x08
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	e8 2e       	mov	r14, r24
    10c8:	f1 2c       	mov	r15, r1
    10ca:	ec 0e       	add	r14, r28
    10cc:	fd 1e       	adc	r15, r29
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	b7 01       	movw	r22, r14
    10d4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    10d8:	8e 01       	movw	r16, r28
    10da:	0f 5e       	subi	r16, 0xEF	; 239
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	ce 01       	movw	r24, r28
    10e0:	05 96       	adiw	r24, 0x05	; 5
    10e2:	b8 01       	movw	r22, r16
    10e4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	40 f0       	brcs	.+16     	; 0x10fe <__gesf2+0x56>
    10ee:	89 89       	ldd	r24, Y+17	; 0x11
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	28 f0       	brcs	.+10     	; 0x10fe <__gesf2+0x56>
    10f4:	c7 01       	movw	r24, r14
    10f6:	b8 01       	movw	r22, r16
    10f8:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fpcmp_parts_f>
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <__gesf2+0x58>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	68 96       	adiw	r28, 0x18	; 24
    1102:	e6 e0       	ldi	r30, 0x06	; 6
    1104:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x18>

00001108 <__ltsf2>:
    1108:	a8 e1       	ldi	r26, 0x18	; 24
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e8       	ldi	r30, 0x8A	; 138
    110e:	f8 e0       	ldi	r31, 0x08	; 8
    1110:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x18>
    1114:	69 83       	std	Y+1, r22	; 0x01
    1116:	7a 83       	std	Y+2, r23	; 0x02
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	2d 83       	std	Y+5, r18	; 0x05
    111e:	3e 83       	std	Y+6, r19	; 0x06
    1120:	4f 83       	std	Y+7, r20	; 0x07
    1122:	58 87       	std	Y+8, r21	; 0x08
    1124:	89 e0       	ldi	r24, 0x09	; 9
    1126:	e8 2e       	mov	r14, r24
    1128:	f1 2c       	mov	r15, r1
    112a:	ec 0e       	add	r14, r28
    112c:	fd 1e       	adc	r15, r29
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	b7 01       	movw	r22, r14
    1134:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    1138:	8e 01       	movw	r16, r28
    113a:	0f 5e       	subi	r16, 0xEF	; 239
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	ce 01       	movw	r24, r28
    1140:	05 96       	adiw	r24, 0x05	; 5
    1142:	b8 01       	movw	r22, r16
    1144:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	40 f0       	brcs	.+16     	; 0x115e <__ltsf2+0x56>
    114e:	89 89       	ldd	r24, Y+17	; 0x11
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	28 f0       	brcs	.+10     	; 0x115e <__ltsf2+0x56>
    1154:	c7 01       	movw	r24, r14
    1156:	b8 01       	movw	r22, r16
    1158:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fpcmp_parts_f>
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <__ltsf2+0x58>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	68 96       	adiw	r28, 0x18	; 24
    1162:	e6 e0       	ldi	r30, 0x06	; 6
    1164:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x18>

00001168 <__floatsisf>:
    1168:	a8 e0       	ldi	r26, 0x08	; 8
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea eb       	ldi	r30, 0xBA	; 186
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__+0x12>
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	da 01       	movw	r26, r20
    117e:	c9 01       	movw	r24, r18
    1180:	88 27       	eor	r24, r24
    1182:	b7 fd       	sbrc	r27, 7
    1184:	83 95       	inc	r24
    1186:	99 27       	eor	r25, r25
    1188:	aa 27       	eor	r26, r26
    118a:	bb 27       	eor	r27, r27
    118c:	b8 2e       	mov	r11, r24
    118e:	21 15       	cp	r18, r1
    1190:	31 05       	cpc	r19, r1
    1192:	41 05       	cpc	r20, r1
    1194:	51 05       	cpc	r21, r1
    1196:	19 f4       	brne	.+6      	; 0x119e <__floatsisf+0x36>
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	3a c0       	rjmp	.+116    	; 0x1212 <__floatsisf+0xaa>
    119e:	88 23       	and	r24, r24
    11a0:	a9 f0       	breq	.+42     	; 0x11cc <__floatsisf+0x64>
    11a2:	20 30       	cpi	r18, 0x00	; 0
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	38 07       	cpc	r19, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	48 07       	cpc	r20, r24
    11ac:	80 e8       	ldi	r24, 0x80	; 128
    11ae:	58 07       	cpc	r21, r24
    11b0:	29 f4       	brne	.+10     	; 0x11bc <__floatsisf+0x54>
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	9f ec       	ldi	r25, 0xCF	; 207
    11ba:	30 c0       	rjmp	.+96     	; 0x121c <__floatsisf+0xb4>
    11bc:	ee 24       	eor	r14, r14
    11be:	ff 24       	eor	r15, r15
    11c0:	87 01       	movw	r16, r14
    11c2:	e2 1a       	sub	r14, r18
    11c4:	f3 0a       	sbc	r15, r19
    11c6:	04 0b       	sbc	r16, r20
    11c8:	15 0b       	sbc	r17, r21
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <__floatsisf+0x68>
    11cc:	79 01       	movw	r14, r18
    11ce:	8a 01       	movw	r16, r20
    11d0:	8e e1       	ldi	r24, 0x1E	; 30
    11d2:	c8 2e       	mov	r12, r24
    11d4:	d1 2c       	mov	r13, r1
    11d6:	dc 82       	std	Y+4, r13	; 0x04
    11d8:	cb 82       	std	Y+3, r12	; 0x03
    11da:	ed 82       	std	Y+5, r14	; 0x05
    11dc:	fe 82       	std	Y+6, r15	; 0x06
    11de:	0f 83       	std	Y+7, r16	; 0x07
    11e0:	18 87       	std	Y+8, r17	; 0x08
    11e2:	c8 01       	movw	r24, r16
    11e4:	b7 01       	movw	r22, r14
    11e6:	0e 94 66 09 	call	0x12cc	; 0x12cc <__clzsi2>
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	18 16       	cp	r1, r24
    11ee:	19 06       	cpc	r1, r25
    11f0:	84 f4       	brge	.+32     	; 0x1212 <__floatsisf+0xaa>
    11f2:	08 2e       	mov	r0, r24
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__floatsisf+0x96>
    11f6:	ee 0c       	add	r14, r14
    11f8:	ff 1c       	adc	r15, r15
    11fa:	00 1f       	adc	r16, r16
    11fc:	11 1f       	adc	r17, r17
    11fe:	0a 94       	dec	r0
    1200:	d2 f7       	brpl	.-12     	; 0x11f6 <__floatsisf+0x8e>
    1202:	ed 82       	std	Y+5, r14	; 0x05
    1204:	fe 82       	std	Y+6, r15	; 0x06
    1206:	0f 83       	std	Y+7, r16	; 0x07
    1208:	18 87       	std	Y+8, r17	; 0x08
    120a:	c8 1a       	sub	r12, r24
    120c:	d9 0a       	sbc	r13, r25
    120e:	dc 82       	std	Y+4, r13	; 0x04
    1210:	cb 82       	std	Y+3, r12	; 0x03
    1212:	ba 82       	std	Y+2, r11	; 0x02
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 b5 09 	call	0x136a	; 0x136a <__pack_f>
    121c:	28 96       	adiw	r28, 0x08	; 8
    121e:	e9 e0       	ldi	r30, 0x09	; 9
    1220:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__+0x12>

00001224 <__fixsfsi>:
    1224:	ac e0       	ldi	r26, 0x0C	; 12
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e1       	ldi	r30, 0x18	; 24
    122a:	f9 e0       	ldi	r31, 0x09	; 9
    122c:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__prologue_saves__+0x20>
    1230:	69 83       	std	Y+1, r22	; 0x01
    1232:	7a 83       	std	Y+2, r23	; 0x02
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	be 01       	movw	r22, r28
    123e:	6b 5f       	subi	r22, 0xFB	; 251
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__unpack_f>
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	61 f1       	breq	.+88     	; 0x12a4 <__fixsfsi+0x80>
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	50 f1       	brcs	.+84     	; 0x12a4 <__fixsfsi+0x80>
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	21 f4       	brne	.+8      	; 0x125c <__fixsfsi+0x38>
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	88 23       	and	r24, r24
    1258:	51 f1       	breq	.+84     	; 0x12ae <__fixsfsi+0x8a>
    125a:	2e c0       	rjmp	.+92     	; 0x12b8 <__fixsfsi+0x94>
    125c:	2f 81       	ldd	r18, Y+7	; 0x07
    125e:	38 85       	ldd	r19, Y+8	; 0x08
    1260:	37 fd       	sbrc	r19, 7
    1262:	20 c0       	rjmp	.+64     	; 0x12a4 <__fixsfsi+0x80>
    1264:	6e 81       	ldd	r22, Y+6	; 0x06
    1266:	2f 31       	cpi	r18, 0x1F	; 31
    1268:	31 05       	cpc	r19, r1
    126a:	1c f0       	brlt	.+6      	; 0x1272 <__fixsfsi+0x4e>
    126c:	66 23       	and	r22, r22
    126e:	f9 f0       	breq	.+62     	; 0x12ae <__fixsfsi+0x8a>
    1270:	23 c0       	rjmp	.+70     	; 0x12b8 <__fixsfsi+0x94>
    1272:	8e e1       	ldi	r24, 0x1E	; 30
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	82 1b       	sub	r24, r18
    1278:	93 0b       	sbc	r25, r19
    127a:	29 85       	ldd	r18, Y+9	; 0x09
    127c:	3a 85       	ldd	r19, Y+10	; 0x0a
    127e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1280:	5c 85       	ldd	r21, Y+12	; 0x0c
    1282:	04 c0       	rjmp	.+8      	; 0x128c <__fixsfsi+0x68>
    1284:	56 95       	lsr	r21
    1286:	47 95       	ror	r20
    1288:	37 95       	ror	r19
    128a:	27 95       	ror	r18
    128c:	8a 95       	dec	r24
    128e:	d2 f7       	brpl	.-12     	; 0x1284 <__fixsfsi+0x60>
    1290:	66 23       	and	r22, r22
    1292:	b1 f0       	breq	.+44     	; 0x12c0 <__fixsfsi+0x9c>
    1294:	50 95       	com	r21
    1296:	40 95       	com	r20
    1298:	30 95       	com	r19
    129a:	21 95       	neg	r18
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	4f 4f       	sbci	r20, 0xFF	; 255
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <__fixsfsi+0x9c>
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <__fixsfsi+0x9c>
    12ae:	2f ef       	ldi	r18, 0xFF	; 255
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	4f ef       	ldi	r20, 0xFF	; 255
    12b4:	5f e7       	ldi	r21, 0x7F	; 127
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <__fixsfsi+0x9c>
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e8       	ldi	r21, 0x80	; 128
    12c0:	b9 01       	movw	r22, r18
    12c2:	ca 01       	movw	r24, r20
    12c4:	2c 96       	adiw	r28, 0x0c	; 12
    12c6:	e2 e0       	ldi	r30, 0x02	; 2
    12c8:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__epilogue_restores__+0x20>

000012cc <__clzsi2>:
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	7b 01       	movw	r14, r22
    12d6:	8c 01       	movw	r16, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	e8 16       	cp	r14, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	f8 06       	cpc	r15, r24
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	08 07       	cpc	r16, r24
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	18 07       	cpc	r17, r24
    12e8:	88 f4       	brcc	.+34     	; 0x130c <__clzsi2+0x40>
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	e8 16       	cp	r14, r24
    12ee:	f1 04       	cpc	r15, r1
    12f0:	01 05       	cpc	r16, r1
    12f2:	11 05       	cpc	r17, r1
    12f4:	31 f0       	breq	.+12     	; 0x1302 <__clzsi2+0x36>
    12f6:	28 f0       	brcs	.+10     	; 0x1302 <__clzsi2+0x36>
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e0       	ldi	r26, 0x00	; 0
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	17 c0       	rjmp	.+46     	; 0x1330 <__clzsi2+0x64>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <__clzsi2+0x64>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	e8 16       	cp	r14, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	f8 06       	cpc	r15, r24
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	08 07       	cpc	r16, r24
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	18 07       	cpc	r17, r24
    131c:	28 f0       	brcs	.+10     	; 0x1328 <__clzsi2+0x5c>
    131e:	88 e1       	ldi	r24, 0x18	; 24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <__clzsi2+0x64>
    1328:	80 e1       	ldi	r24, 0x10	; 16
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	20 e2       	ldi	r18, 0x20	; 32
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	28 1b       	sub	r18, r24
    133a:	39 0b       	sbc	r19, r25
    133c:	4a 0b       	sbc	r20, r26
    133e:	5b 0b       	sbc	r21, r27
    1340:	04 c0       	rjmp	.+8      	; 0x134a <__clzsi2+0x7e>
    1342:	16 95       	lsr	r17
    1344:	07 95       	ror	r16
    1346:	f7 94       	ror	r15
    1348:	e7 94       	ror	r14
    134a:	8a 95       	dec	r24
    134c:	d2 f7       	brpl	.-12     	; 0x1342 <__clzsi2+0x76>
    134e:	f7 01       	movw	r30, r14
    1350:	e4 5f       	subi	r30, 0xF4	; 244
    1352:	fe 4f       	sbci	r31, 0xFE	; 254
    1354:	80 81       	ld	r24, Z
    1356:	28 1b       	sub	r18, r24
    1358:	31 09       	sbc	r19, r1
    135a:	41 09       	sbc	r20, r1
    135c:	51 09       	sbc	r21, r1
    135e:	c9 01       	movw	r24, r18
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	08 95       	ret

0000136a <__pack_f>:
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	fc 01       	movw	r30, r24
    1376:	e4 80       	ldd	r14, Z+4	; 0x04
    1378:	f5 80       	ldd	r15, Z+5	; 0x05
    137a:	06 81       	ldd	r16, Z+6	; 0x06
    137c:	17 81       	ldd	r17, Z+7	; 0x07
    137e:	d1 80       	ldd	r13, Z+1	; 0x01
    1380:	80 81       	ld	r24, Z
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	48 f4       	brcc	.+18     	; 0x1398 <__pack_f+0x2e>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e1       	ldi	r26, 0x10	; 16
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e8 2a       	or	r14, r24
    1390:	f9 2a       	or	r15, r25
    1392:	0a 2b       	or	r16, r26
    1394:	1b 2b       	or	r17, r27
    1396:	a5 c0       	rjmp	.+330    	; 0x14e2 <__pack_f+0x178>
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	09 f4       	brne	.+2      	; 0x139e <__pack_f+0x34>
    139c:	9f c0       	rjmp	.+318    	; 0x14dc <__pack_f+0x172>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	21 f4       	brne	.+8      	; 0x13aa <__pack_f+0x40>
    13a2:	ee 24       	eor	r14, r14
    13a4:	ff 24       	eor	r15, r15
    13a6:	87 01       	movw	r16, r14
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <__pack_f+0x4a>
    13aa:	e1 14       	cp	r14, r1
    13ac:	f1 04       	cpc	r15, r1
    13ae:	01 05       	cpc	r16, r1
    13b0:	11 05       	cpc	r17, r1
    13b2:	19 f4       	brne	.+6      	; 0x13ba <__pack_f+0x50>
    13b4:	e0 e0       	ldi	r30, 0x00	; 0
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	96 c0       	rjmp	.+300    	; 0x14e6 <__pack_f+0x17c>
    13ba:	62 81       	ldd	r22, Z+2	; 0x02
    13bc:	73 81       	ldd	r23, Z+3	; 0x03
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	62 38       	cpi	r22, 0x82	; 130
    13c2:	79 07       	cpc	r23, r25
    13c4:	0c f0       	brlt	.+2      	; 0x13c8 <__pack_f+0x5e>
    13c6:	5b c0       	rjmp	.+182    	; 0x147e <__pack_f+0x114>
    13c8:	22 e8       	ldi	r18, 0x82	; 130
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	26 1b       	sub	r18, r22
    13ce:	37 0b       	sbc	r19, r23
    13d0:	2a 31       	cpi	r18, 0x1A	; 26
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f0       	brlt	.+10     	; 0x13e0 <__pack_f+0x76>
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	2a c0       	rjmp	.+84     	; 0x1434 <__pack_f+0xca>
    13e0:	b8 01       	movw	r22, r16
    13e2:	a7 01       	movw	r20, r14
    13e4:	02 2e       	mov	r0, r18
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <__pack_f+0x86>
    13e8:	76 95       	lsr	r23
    13ea:	67 95       	ror	r22
    13ec:	57 95       	ror	r21
    13ee:	47 95       	ror	r20
    13f0:	0a 94       	dec	r0
    13f2:	d2 f7       	brpl	.-12     	; 0x13e8 <__pack_f+0x7e>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a0 e0       	ldi	r26, 0x00	; 0
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <__pack_f+0x9c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	aa 1f       	adc	r26, r26
    1404:	bb 1f       	adc	r27, r27
    1406:	2a 95       	dec	r18
    1408:	d2 f7       	brpl	.-12     	; 0x13fe <__pack_f+0x94>
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	a1 09       	sbc	r26, r1
    140e:	b1 09       	sbc	r27, r1
    1410:	8e 21       	and	r24, r14
    1412:	9f 21       	and	r25, r15
    1414:	a0 23       	and	r26, r16
    1416:	b1 23       	and	r27, r17
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	a1 05       	cpc	r26, r1
    141c:	b1 05       	cpc	r27, r1
    141e:	21 f0       	breq	.+8      	; 0x1428 <__pack_f+0xbe>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	9a 01       	movw	r18, r20
    142a:	ab 01       	movw	r20, r22
    142c:	28 2b       	or	r18, r24
    142e:	39 2b       	or	r19, r25
    1430:	4a 2b       	or	r20, r26
    1432:	5b 2b       	or	r21, r27
    1434:	da 01       	movw	r26, r20
    1436:	c9 01       	movw	r24, r18
    1438:	8f 77       	andi	r24, 0x7F	; 127
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	a0 70       	andi	r26, 0x00	; 0
    143e:	b0 70       	andi	r27, 0x00	; 0
    1440:	80 34       	cpi	r24, 0x40	; 64
    1442:	91 05       	cpc	r25, r1
    1444:	a1 05       	cpc	r26, r1
    1446:	b1 05       	cpc	r27, r1
    1448:	39 f4       	brne	.+14     	; 0x1458 <__pack_f+0xee>
    144a:	27 ff       	sbrs	r18, 7
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <__pack_f+0xf6>
    144e:	20 5c       	subi	r18, 0xC0	; 192
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	4f 4f       	sbci	r20, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <__pack_f+0xf6>
    1458:	21 5c       	subi	r18, 0xC1	; 193
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	4f 4f       	sbci	r20, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	e0 e0       	ldi	r30, 0x00	; 0
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	20 30       	cpi	r18, 0x00	; 0
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	3a 07       	cpc	r19, r26
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	4a 07       	cpc	r20, r26
    146e:	a0 e4       	ldi	r26, 0x40	; 64
    1470:	5a 07       	cpc	r21, r26
    1472:	10 f0       	brcs	.+4      	; 0x1478 <__pack_f+0x10e>
    1474:	e1 e0       	ldi	r30, 0x01	; 1
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	79 01       	movw	r14, r18
    147a:	8a 01       	movw	r16, r20
    147c:	27 c0       	rjmp	.+78     	; 0x14cc <__pack_f+0x162>
    147e:	60 38       	cpi	r22, 0x80	; 128
    1480:	71 05       	cpc	r23, r1
    1482:	64 f5       	brge	.+88     	; 0x14dc <__pack_f+0x172>
    1484:	fb 01       	movw	r30, r22
    1486:	e1 58       	subi	r30, 0x81	; 129
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	d8 01       	movw	r26, r16
    148c:	c7 01       	movw	r24, r14
    148e:	8f 77       	andi	r24, 0x7F	; 127
    1490:	90 70       	andi	r25, 0x00	; 0
    1492:	a0 70       	andi	r26, 0x00	; 0
    1494:	b0 70       	andi	r27, 0x00	; 0
    1496:	80 34       	cpi	r24, 0x40	; 64
    1498:	91 05       	cpc	r25, r1
    149a:	a1 05       	cpc	r26, r1
    149c:	b1 05       	cpc	r27, r1
    149e:	39 f4       	brne	.+14     	; 0x14ae <__pack_f+0x144>
    14a0:	e7 fe       	sbrs	r14, 7
    14a2:	0d c0       	rjmp	.+26     	; 0x14be <__pack_f+0x154>
    14a4:	80 e4       	ldi	r24, 0x40	; 64
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <__pack_f+0x14c>
    14ae:	8f e3       	ldi	r24, 0x3F	; 63
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a0 e0       	ldi	r26, 0x00	; 0
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 0e       	add	r14, r24
    14b8:	f9 1e       	adc	r15, r25
    14ba:	0a 1f       	adc	r16, r26
    14bc:	1b 1f       	adc	r17, r27
    14be:	17 ff       	sbrs	r17, 7
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <__pack_f+0x162>
    14c2:	16 95       	lsr	r17
    14c4:	07 95       	ror	r16
    14c6:	f7 94       	ror	r15
    14c8:	e7 94       	ror	r14
    14ca:	31 96       	adiw	r30, 0x01	; 1
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	16 95       	lsr	r17
    14d0:	07 95       	ror	r16
    14d2:	f7 94       	ror	r15
    14d4:	e7 94       	ror	r14
    14d6:	8a 95       	dec	r24
    14d8:	d1 f7       	brne	.-12     	; 0x14ce <__pack_f+0x164>
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <__pack_f+0x17c>
    14dc:	ee 24       	eor	r14, r14
    14de:	ff 24       	eor	r15, r15
    14e0:	87 01       	movw	r16, r14
    14e2:	ef ef       	ldi	r30, 0xFF	; 255
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	6e 2f       	mov	r22, r30
    14e8:	67 95       	ror	r22
    14ea:	66 27       	eor	r22, r22
    14ec:	67 95       	ror	r22
    14ee:	90 2f       	mov	r25, r16
    14f0:	9f 77       	andi	r25, 0x7F	; 127
    14f2:	d7 94       	ror	r13
    14f4:	dd 24       	eor	r13, r13
    14f6:	d7 94       	ror	r13
    14f8:	8e 2f       	mov	r24, r30
    14fa:	86 95       	lsr	r24
    14fc:	49 2f       	mov	r20, r25
    14fe:	46 2b       	or	r20, r22
    1500:	58 2f       	mov	r21, r24
    1502:	5d 29       	or	r21, r13
    1504:	b7 01       	movw	r22, r14
    1506:	ca 01       	movw	r24, r20
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	08 95       	ret

00001514 <__unpack_f>:
    1514:	fc 01       	movw	r30, r24
    1516:	db 01       	movw	r26, r22
    1518:	40 81       	ld	r20, Z
    151a:	51 81       	ldd	r21, Z+1	; 0x01
    151c:	22 81       	ldd	r18, Z+2	; 0x02
    151e:	62 2f       	mov	r22, r18
    1520:	6f 77       	andi	r22, 0x7F	; 127
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	22 1f       	adc	r18, r18
    1526:	22 27       	eor	r18, r18
    1528:	22 1f       	adc	r18, r18
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	89 2f       	mov	r24, r25
    152e:	88 0f       	add	r24, r24
    1530:	82 2b       	or	r24, r18
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	99 1f       	adc	r25, r25
    1538:	99 27       	eor	r25, r25
    153a:	99 1f       	adc	r25, r25
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	9c 93       	st	X, r25
    1540:	11 97       	sbiw	r26, 0x01	; 1
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	a9 f5       	brne	.+106    	; 0x15b2 <__unpack_f+0x9e>
    1548:	41 15       	cp	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	61 05       	cpc	r22, r1
    154e:	71 05       	cpc	r23, r1
    1550:	11 f4       	brne	.+4      	; 0x1556 <__unpack_f+0x42>
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	37 c0       	rjmp	.+110    	; 0x15c4 <__unpack_f+0xb0>
    1556:	82 e8       	ldi	r24, 0x82	; 130
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	13 96       	adiw	r26, 0x03	; 3
    155c:	9c 93       	st	X, r25
    155e:	8e 93       	st	-X, r24
    1560:	12 97       	sbiw	r26, 0x02	; 2
    1562:	9a 01       	movw	r18, r20
    1564:	ab 01       	movw	r20, r22
    1566:	67 e0       	ldi	r22, 0x07	; 7
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	44 1f       	adc	r20, r20
    156e:	55 1f       	adc	r21, r21
    1570:	6a 95       	dec	r22
    1572:	d1 f7       	brne	.-12     	; 0x1568 <__unpack_f+0x54>
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	8c 93       	st	X, r24
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <__unpack_f+0x80>
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	44 1f       	adc	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	12 96       	adiw	r26, 0x02	; 2
    1584:	8d 91       	ld	r24, X+
    1586:	9c 91       	ld	r25, X
    1588:	13 97       	sbiw	r26, 0x03	; 3
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	13 96       	adiw	r26, 0x03	; 3
    158e:	9c 93       	st	X, r25
    1590:	8e 93       	st	-X, r24
    1592:	12 97       	sbiw	r26, 0x02	; 2
    1594:	20 30       	cpi	r18, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	38 07       	cpc	r19, r24
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	48 07       	cpc	r20, r24
    159e:	80 e4       	ldi	r24, 0x40	; 64
    15a0:	58 07       	cpc	r21, r24
    15a2:	58 f3       	brcs	.-42     	; 0x157a <__unpack_f+0x66>
    15a4:	14 96       	adiw	r26, 0x04	; 4
    15a6:	2d 93       	st	X+, r18
    15a8:	3d 93       	st	X+, r19
    15aa:	4d 93       	st	X+, r20
    15ac:	5c 93       	st	X, r21
    15ae:	17 97       	sbiw	r26, 0x07	; 7
    15b0:	08 95       	ret
    15b2:	2f 3f       	cpi	r18, 0xFF	; 255
    15b4:	31 05       	cpc	r19, r1
    15b6:	79 f4       	brne	.+30     	; 0x15d6 <__unpack_f+0xc2>
    15b8:	41 15       	cp	r20, r1
    15ba:	51 05       	cpc	r21, r1
    15bc:	61 05       	cpc	r22, r1
    15be:	71 05       	cpc	r23, r1
    15c0:	19 f4       	brne	.+6      	; 0x15c8 <__unpack_f+0xb4>
    15c2:	84 e0       	ldi	r24, 0x04	; 4
    15c4:	8c 93       	st	X, r24
    15c6:	08 95       	ret
    15c8:	64 ff       	sbrs	r22, 4
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <__unpack_f+0xbe>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8c 93       	st	X, r24
    15d0:	12 c0       	rjmp	.+36     	; 0x15f6 <__unpack_f+0xe2>
    15d2:	1c 92       	st	X, r1
    15d4:	10 c0       	rjmp	.+32     	; 0x15f6 <__unpack_f+0xe2>
    15d6:	2f 57       	subi	r18, 0x7F	; 127
    15d8:	30 40       	sbci	r19, 0x00	; 0
    15da:	13 96       	adiw	r26, 0x03	; 3
    15dc:	3c 93       	st	X, r19
    15de:	2e 93       	st	-X, r18
    15e0:	12 97       	sbiw	r26, 0x02	; 2
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	8c 93       	st	X, r24
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	44 0f       	add	r20, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	8a 95       	dec	r24
    15f2:	d1 f7       	brne	.-12     	; 0x15e8 <__unpack_f+0xd4>
    15f4:	70 64       	ori	r23, 0x40	; 64
    15f6:	14 96       	adiw	r26, 0x04	; 4
    15f8:	4d 93       	st	X+, r20
    15fa:	5d 93       	st	X+, r21
    15fc:	6d 93       	st	X+, r22
    15fe:	7c 93       	st	X, r23
    1600:	17 97       	sbiw	r26, 0x07	; 7
    1602:	08 95       	ret

00001604 <__fpcmp_parts_f>:
    1604:	1f 93       	push	r17
    1606:	dc 01       	movw	r26, r24
    1608:	fb 01       	movw	r30, r22
    160a:	9c 91       	ld	r25, X
    160c:	92 30       	cpi	r25, 0x02	; 2
    160e:	08 f4       	brcc	.+2      	; 0x1612 <__fpcmp_parts_f+0xe>
    1610:	47 c0       	rjmp	.+142    	; 0x16a0 <__fpcmp_parts_f+0x9c>
    1612:	80 81       	ld	r24, Z
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	08 f4       	brcc	.+2      	; 0x161a <__fpcmp_parts_f+0x16>
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <__fpcmp_parts_f+0x9c>
    161a:	94 30       	cpi	r25, 0x04	; 4
    161c:	51 f4       	brne	.+20     	; 0x1632 <__fpcmp_parts_f+0x2e>
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	1c 91       	ld	r17, X
    1622:	84 30       	cpi	r24, 0x04	; 4
    1624:	99 f5       	brne	.+102    	; 0x168c <__fpcmp_parts_f+0x88>
    1626:	81 81       	ldd	r24, Z+1	; 0x01
    1628:	68 2f       	mov	r22, r24
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	61 1b       	sub	r22, r17
    162e:	71 09       	sbc	r23, r1
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <__fpcmp_parts_f+0xac>
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	21 f0       	breq	.+8      	; 0x163e <__fpcmp_parts_f+0x3a>
    1636:	92 30       	cpi	r25, 0x02	; 2
    1638:	31 f4       	brne	.+12     	; 0x1646 <__fpcmp_parts_f+0x42>
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	b9 f1       	breq	.+110    	; 0x16ac <__fpcmp_parts_f+0xa8>
    163e:	81 81       	ldd	r24, Z+1	; 0x01
    1640:	88 23       	and	r24, r24
    1642:	89 f1       	breq	.+98     	; 0x16a6 <__fpcmp_parts_f+0xa2>
    1644:	2d c0       	rjmp	.+90     	; 0x16a0 <__fpcmp_parts_f+0x9c>
    1646:	11 96       	adiw	r26, 0x01	; 1
    1648:	1c 91       	ld	r17, X
    164a:	11 97       	sbiw	r26, 0x01	; 1
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	f1 f0       	breq	.+60     	; 0x168c <__fpcmp_parts_f+0x88>
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	18 17       	cp	r17, r24
    1654:	d9 f4       	brne	.+54     	; 0x168c <__fpcmp_parts_f+0x88>
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	2d 91       	ld	r18, X+
    165a:	3c 91       	ld	r19, X
    165c:	13 97       	sbiw	r26, 0x03	; 3
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	82 17       	cp	r24, r18
    1664:	93 07       	cpc	r25, r19
    1666:	94 f0       	brlt	.+36     	; 0x168c <__fpcmp_parts_f+0x88>
    1668:	28 17       	cp	r18, r24
    166a:	39 07       	cpc	r19, r25
    166c:	bc f0       	brlt	.+46     	; 0x169c <__fpcmp_parts_f+0x98>
    166e:	14 96       	adiw	r26, 0x04	; 4
    1670:	8d 91       	ld	r24, X+
    1672:	9d 91       	ld	r25, X+
    1674:	0d 90       	ld	r0, X+
    1676:	bc 91       	ld	r27, X
    1678:	a0 2d       	mov	r26, r0
    167a:	24 81       	ldd	r18, Z+4	; 0x04
    167c:	35 81       	ldd	r19, Z+5	; 0x05
    167e:	46 81       	ldd	r20, Z+6	; 0x06
    1680:	57 81       	ldd	r21, Z+7	; 0x07
    1682:	28 17       	cp	r18, r24
    1684:	39 07       	cpc	r19, r25
    1686:	4a 07       	cpc	r20, r26
    1688:	5b 07       	cpc	r21, r27
    168a:	18 f4       	brcc	.+6      	; 0x1692 <__fpcmp_parts_f+0x8e>
    168c:	11 23       	and	r17, r17
    168e:	41 f0       	breq	.+16     	; 0x16a0 <__fpcmp_parts_f+0x9c>
    1690:	0a c0       	rjmp	.+20     	; 0x16a6 <__fpcmp_parts_f+0xa2>
    1692:	82 17       	cp	r24, r18
    1694:	93 07       	cpc	r25, r19
    1696:	a4 07       	cpc	r26, r20
    1698:	b5 07       	cpc	r27, r21
    169a:	40 f4       	brcc	.+16     	; 0x16ac <__fpcmp_parts_f+0xa8>
    169c:	11 23       	and	r17, r17
    169e:	19 f0       	breq	.+6      	; 0x16a6 <__fpcmp_parts_f+0xa2>
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <__fpcmp_parts_f+0xac>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <__fpcmp_parts_f+0xac>
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	cb 01       	movw	r24, r22
    16b2:	1f 91       	pop	r17
    16b4:	08 95       	ret

000016b6 <__prologue_saves__>:
    16b6:	2f 92       	push	r2
    16b8:	3f 92       	push	r3
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	ca 1b       	sub	r28, r26
    16e0:	db 0b       	sbc	r29, r27
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	09 94       	ijmp

000016ee <__epilogue_restores__>:
    16ee:	2a 88       	ldd	r2, Y+18	; 0x12
    16f0:	39 88       	ldd	r3, Y+17	; 0x11
    16f2:	48 88       	ldd	r4, Y+16	; 0x10
    16f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    16f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    16f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    16fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    16fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    16fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1700:	b9 84       	ldd	r11, Y+9	; 0x09
    1702:	c8 84       	ldd	r12, Y+8	; 0x08
    1704:	df 80       	ldd	r13, Y+7	; 0x07
    1706:	ee 80       	ldd	r14, Y+6	; 0x06
    1708:	fd 80       	ldd	r15, Y+5	; 0x05
    170a:	0c 81       	ldd	r16, Y+4	; 0x04
    170c:	1b 81       	ldd	r17, Y+3	; 0x03
    170e:	aa 81       	ldd	r26, Y+2	; 0x02
    1710:	b9 81       	ldd	r27, Y+1	; 0x01
    1712:	ce 0f       	add	r28, r30
    1714:	d1 1d       	adc	r29, r1
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	ed 01       	movw	r28, r26
    1722:	08 95       	ret

00001724 <_exit>:
    1724:	f8 94       	cli

00001726 <__stop_program>:
    1726:	ff cf       	rjmp	.-2      	; 0x1726 <__stop_program>
